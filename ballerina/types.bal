// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# Represents the Queries record for the operation: getChatCompletionMessages
public type GetChatCompletionMessagesQueries record {
    # Number of messages to retrieve
    int 'limit = 20;
    # Identifier for the last message from the previous pagination request
    string after?;
    # Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`
    "asc"|"desc" 'order = "asc";
};

public type EvalRunPerModelUsage record {
    # The number of completion tokens generated
    @jsondata:Name {value: "completion_tokens"}
    int completionTokens;
    # The number of prompt tokens used
    @jsondata:Name {value: "prompt_tokens"}
    int promptTokens;
    # The name of the model
    @jsondata:Name {value: "model_name"}
    string modelName;
    # The total number of tokens used
    @jsondata:Name {value: "total_tokens"}
    int totalTokens;
    # The number of invocations
    @jsondata:Name {value: "invocation_count"}
    int invocationCount;
    # The number of tokens retrieved from cache
    @jsondata:Name {value: "cached_tokens"}
    int cachedTokens;
};

# The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use
public type FineTuningJobCheckpoint record {
    # The step number that the checkpoint was created at
    @jsondata:Name {value: "step_number"}
    int stepNumber;
    # The Unix timestamp (in seconds) for when the checkpoint was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The name of the fine-tuning job that this checkpoint was created from
    @jsondata:Name {value: "fine_tuning_job_id"}
    string fineTuningJobId;
    # The checkpoint identifier, which can be referenced in the API endpoints
    string id;
    # Metrics at the step number during the fine-tuning job
    FineTuningJobCheckpointMetrics metrics;
    # The name of the fine-tuned checkpoint model that is created
    @jsondata:Name {value: "fine_tuned_model_checkpoint"}
    string fineTunedModelCheckpoint;
    # The object type, which is always "fine_tuning.job.checkpoint"
    "fine_tuning.job.checkpoint" 'object;
};

# This tool searches the web for relevant results to use in a response. Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search)
public type WebSearchPreviewTool record {
    # High level guidance for the amount of context window space to use for the search. One of `low`, `medium`, or `high`. `medium` is the default
    @jsondata:Name {value: "search_context_size"}
    "low"|"medium"|"high" searchContextSize?;
    @jsondata:Name {value: "user_location"}
    anydata userLocation?;
    # The type of the web search tool. One of `web_search_preview` or `web_search_preview_2025_03_11`
    "web_search_preview"|"web_search_preview_2025_03_11" 'type = "web_search_preview";
};

# The aggregated vector stores usage details of the specific time bucket
public type UsageVectorStoresResult record {
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    # The vector stores usage in bytes
    @jsondata:Name {value: "usage_bytes"}
    int usageBytes;
    "organization.usage.vector_stores.result" 'object;
};

# An error object returned when the model fails to generate a Response
public type ResponseError record {
    # The error code for the response
    ResponseErrorCode code;
    # A human-readable description of the error
    string message;
};

public type CreateResponseAllOf3 record {
    # Text, image, or file inputs to the model, used to generate a response.
    # 
    # Learn more:
    # - [Text inputs and outputs](/docs/guides/text)
    # - [Image inputs](/docs/guides/images)
    # - [File inputs](/docs/guides/pdf-files)
    # - [Conversation state](/docs/guides/conversation-state)
    # - [Function calling](/docs/guides/function-calling)
    string|InputItem[] input;
    # Specify additional output data to include in the model response. Currently
    # supported values are:
    # - `file_search_call.results`: Include the search results of
    #   the file search tool call.
    # - `message.input_image.image_url`: Include image urls from the input message.
    # - `computer_call_output.output.image_url`: Include image urls from the computer call output
    Includable[]? include?;
    # Whether to allow the model to run tool calls in parallel
    @jsondata:Name {value: "parallel_tool_calls"}
    boolean? parallelToolCalls = true;
    # If set to true, the model response data will be streamed to the client
    # as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
    # See the [Streaming section below](/docs/api-reference/responses-streaming)
    # for more information
    boolean? 'stream = false;
    # Whether to store the generated model response for later retrieval via
    # API
    boolean? store = true;
};

public type InputMessageResourceAllOf2 record {
    # The unique ID of the message input
    string id;
};

# A pending safety check for the computer call
public type ComputerToolCallSafetyCheck record {
    # The type of the pending safety check
    string code;
    # The ID of the pending safety check
    string id;
    # Details about the pending safety check
    string message;
};

# Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
# 
# Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
# 
# Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
# 
# **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length
public type AssistantsApiResponseFormatOption AssistantsApiResponseFormatOptionOneOf1|ResponseFormatText|ResponseFormatJsonObject|ResponseFormatJsonSchema;

public type ProjectServiceAccountCreateResponse record {
    # Service accounts can only have one role of type `member`
    "member" role;
    @jsondata:Name {value: "api_key"}
    ProjectServiceAccountApiKey apiKey;
    string name;
    @jsondata:Name {value: "created_at"}
    int createdAt;
    string id;
    "organization.project.service_account" 'object;
};

public type InviteProjects record {
    # Project membership role
    "member"|"owner" role?;
    # Project's public ID
    string id?;
};

public type ResponseProperties record {
    # Inserts a system (or developer) message as the first item in the model's context.
    # 
    # When using along with `previous_response_id`, the instructions from a previous
    # response will not be carried over to the next response. This makes it simple
    # to swap out system (or developer) messages in new responses
    string? instructions?;
    # The unique ID of the previous response to the model. Use this to
    # create multi-turn conversations. Learn more about 
    # [conversation state](/docs/guides/conversation-state)
    @jsondata:Name {value: "previous_response_id"}
    string? previousResponseId?;
    # **o-series models only**
    # 
    # Configuration options for 
    # [reasoning models](https://platform.openai.com/docs/guides/reasoning)
    Reasoning reasoning?;
    # How the model should select which tool (or tools) to use when generating
    # a response. See the `tools` parameter to see how to specify which tools
    # the model can call
    @jsondata:Name {value: "tool_choice"}
    ToolChoiceOptions|ToolChoiceTypes|ToolChoiceFunction toolChoice?;
    ModelIdsResponses model?;
    # Configuration options for a text response from the model. Can be plain
    # text or structured JSON data. Learn more:
    # - [Text inputs and outputs](/docs/guides/text)
    # - [Structured Outputs](/docs/guides/structured-outputs)
    ResponsePropertiesText text?;
    # An array of tools the model may call while generating a response. You 
    # can specify which tool to use by setting the `tool_choice` parameter.
    # 
    # The two categories of tools you can provide the model are:
    # 
    # - **Built-in tools**: Tools that are provided by OpenAI that extend the
    #   model's capabilities, like [web search](/docs/guides/tools-web-search)
    #   or [file search](/docs/guides/tools-file-search). Learn more about
    #   [built-in tools](/docs/guides/tools).
    # - **Function calls (custom tools)**: Functions that are defined by you,
    #   enabling the model to call your own code. Learn more about
    #   [function calling](/docs/guides/function-calling)
    Tool[] tools?;
    # The truncation strategy to use for the model response.
    # - `auto`: If the context of this response and previous ones exceeds
    #   the model's context window size, the model will truncate the 
    #   response to fit the context window by dropping input items in the
    #   middle of the conversation. 
    # - `disabled` (default): If a model response will exceed the context window 
    #   size for a model, the request will fail with a 400 error
    "auto"|"disabled"? truncation = "disabled";
    # An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning)
    @jsondata:Name {value: "max_output_tokens"}
    int? maxOutputTokens?;
};

public type ListFineTuningJobCheckpointsResponse record {
    @jsondata:Name {value: "first_id"}
    string? firstId?;
    FineTuningJobCheckpoint[] data;
    @jsondata:Name {value: "last_id"}
    string? lastId?;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

# The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`
public type AutoChunkingStrategyRequestParam record {|
    # Always `auto`
    "auto" 'type;
|};

# A URL citation when using web search
public type ChatCompletionResponseMessageAnnotations record {
    # The type of the URL citation. Always `url_citation`
    "url_citation" 'type;
    @jsondata:Name {value: "url_citation"}
    ChatCompletionResponseMessageUrlCitation urlCitation;
};

public type InputContent InputTextContent|InputImageContent|InputFileContent;

# A description of the chain of thought used by a reasoning model while generating
# a response
public type ReasoningItem record {
    # Reasoning text contents
    ReasoningItemSummary[] summary;
    # The unique identifier of the reasoning content
    string id;
    # The type of the object. Always `reasoning`
    "reasoning" 'type;
    # The status of the item. One of `in_progress`, `completed`, or
    # `incomplete`. Populated when items are returned via API
    "in_progress"|"completed"|"incomplete" status?;
};

public type AssistantToolsFileSearchTypeOnly record {
    # The type of tool being defined: `file_search`
    "file_search" 'type;
};

public type AssistantToolsFileSearch record {
    @jsondata:Name {value: "file_search"}
    AssistantToolsFileSearchFileSearch fileSearch?;
    # The type of tool being defined: `file_search`
    "file_search" 'type;
};

public type CreateMessageRequestAttachments record {
    # The ID of the file to attach to the message
    @jsondata:Name {value: "file_id"}
    string fileId?;
    # The tools to add this file to
    CreateMessageRequestTools[] tools?;
};

public type CreateFineTuningCheckpointPermissionRequest record {|
    # The project identifiers to grant access to
    @jsondata:Name {value: "project_ids"}
    string[] projectIds;
|};

# Represents the Queries record for the operation: admin-api-keys-list
public type AdminApiKeysListQueries record {
    # Maximum number of keys to return.
    int 'limit = 20;
    # Return keys with IDs that come after this ID in the pagination order.
    string? after?;
    # Order results by creation time, ascending or descending.
    "asc"|"desc" 'order = "asc";
};

public type CreateEmbeddingRequest record {|
    # Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs
    string|string[]|int[]|InputItemsArray[] input;
    # The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/)
    @jsondata:Name {value: "encoding_format"}
    "float"|"base64" encodingFormat = "float";
    # ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them
    string|"text-embedding-ada-002"|"text-embedding-3-small"|"text-embedding-3-large" model;
    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)
    string user?;
    # The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models
    @constraint:Int {minValue: 1}
    int dimensions?;
|};

# A ScoreModelGrader object that uses a model to assign a score to the input
public type EvalScoreModelGrader record {
    # The input text. This may include template strings
    EvalItem[] input;
    # The threshold for the score
    @jsondata:Name {value: "pass_threshold"}
    decimal passThreshold?;
    # The name of the grader
    string name;
    # The range of the score. Defaults to `[0, 1]`
    decimal[] range?;
    # The model to use for the evaluation
    string model;
    # The object type, which is always `score_model`
    "score_model" 'type;
    # The sampling parameters for the model
    @jsondata:Name {value: "sampling_params"}
    record {} samplingParams?;
};

# Represents the Queries record for the operation: listVectorStoreFiles
public type ListVectorStoreFilesQueries record {
    # Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`
    "in_progress"|"completed"|"failed"|"cancelled" filter?;
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

public type ListCertificatesResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId?;
    Certificate[] data;
    @jsondata:Name {value: "last_id"}
    string lastId?;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

# Learn about [audio inputs](/docs/guides/audio)
public type ChatCompletionRequestMessageContentPartAudio record {
    @jsondata:Name {value: "input_audio"}
    ChatCompletionRequestMessageContentPartAudioInputAudio inputAudio;
    # The type of the content part. Always `input_audio`
    "input_audio" 'type;
};

public type CreateModerationRequest record {
    # Input (or inputs) to classify. Can be a single string, an array of strings, or
    # an array of multi-modal input objects similar to other models
    string|string[]|(record {"image_url" 'type; record {string url;} image_url;}|record {"text" 'type; string text;})[] input;
    # The content moderation model you would like to use. Learn more in
    # [the moderation guide](/docs/guides/moderation), and learn about
    # available models [here](/docs/models#moderation)
    string|"omni-moderation-latest"|"omni-moderation-2024-09-26"|"text-moderation-latest"|"text-moderation-stable" model = "omni-moderation-latest";
};

# A ResponsesRunDataSource object describing a model sampling configuration
public type CreateEvalResponsesRunDataSource record {
    @jsondata:Name {value: "input_messages"}
    record {"template" 'type; (record {string role; string content;}|EvalItem)[] template;}|record {"item_reference" 'type; string item_reference;} inputMessages?;
    # The name of the model to use for generating completions (e.g. "o3-mini")
    string model?;
    EvalJsonlFileContentSource|EvalJsonlFileIdSource|EvalResponsesSource 'source;
    # The type of run data source. Always `completions`
    "completions" 'type = "completions";
    @jsondata:Name {value: "sampling_params"}
    CreateEvalCompletionsRunDataSourceSamplingParams samplingParams?;
};

public type CreateUploadRequest record {|
    # The name of the file to upload
    string filename;
    # The intended purpose of the uploaded file.
    # 
    # See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose)
    "assistants"|"batch"|"fine-tune"|"vision" purpose;
    # The MIME type of the file.
    # 
    # This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision
    @jsondata:Name {value: "mime_type"}
    string mimeType;
    # The number of bytes in the file you are uploading
    int bytes;
|};

public type CreateSpeechRequest record {|
    VoiceIdsShared voice;
    # The text to generate audio for. The maximum length is 4096 characters
    @constraint:String {maxLength: 4096}
    string input;
    # Control the voice of your generated audio with additional instructions. Does not work with `tts-1` or `tts-1-hd`
    @constraint:String {maxLength: 4096}
    string instructions?;
    # The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`
    @jsondata:Name {value: "response_format"}
    "mp3"|"opus"|"aac"|"flac"|"wav"|"pcm" responseFormat = "mp3";
    # One of the available [TTS models](/docs/models#tts): `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`
    string|"tts-1"|"tts-1-hd"|"gpt-4o-mini-tts" model;
    # The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default
    @constraint:Number {minValue: 0.25, maxValue: 4}
    decimal speed = 1;
|};

# A StoredCompletionsDataSourceConfig which specifies the metadata property of your stored completions query.
# This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.
# The schema returned by this data source config is used to defined what variables are available in your evals.
# `item` and `sample` are both defined when using this data source config
public type EvalStoredCompletionsDataSourceConfig record {
    # The json schema for the run data source items.
    # Learn how to build JSON schemas [here](https://json-schema.org/)
    record {} schema;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The type of data source. Always `stored_completions`
    "stored_completions" 'type = "stored_completions";
};

public type CreateMessageRequestTools AssistantToolsCode|AssistantToolsFileSearchTypeOnly;

# Learn about [text inputs](/docs/guides/text-generation)
public type ChatCompletionRequestMessageContentPartText record {
    # The text content
    string text;
    # The type of the content part
    "text" 'type;
};

public type ModifyThreadRequest record {|
    @jsondata:Name {value: "tool_resources"}
    ModifyThreadRequestToolResources? toolResources?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
|};

# The text content that is part of a message
public type MessageContentTextObject record {
    MessageContentTextObjectText text;
    # Always `text`
    "text" 'type;
};

public type DeleteMessageResponse record {
    boolean deleted;
    string id;
    "thread.message.deleted" 'object;
};

public type AssistantsNamedToolChoiceFunction record {
    # The name of the function to call
    string name;
};

# A LabelModelGrader object which uses a model to assign labels to each item
# in the evaluation
public type EvalLabelModelGrader record {
    EvalItem[] input;
    # The name of the grader
    string name;
    # The model to use for the evaluation. Must support structured outputs
    string model;
    # The labels that indicate a passing result. Must be a subset of labels
    @jsondata:Name {value: "passing_labels"}
    string[] passingLabels;
    # The object type, which is always `label_model`
    "label_model" 'type;
    # The labels to assign to each item in the evaluation
    string[] labels;
};

# Represents an embedding vector returned by embedding endpoint
public type Embedding record {
    # The index of the embedding in the list of embeddings
    int index;
    # The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings)
    decimal[] embedding;
    # The object type, which is always "embedding"
    "embedding" 'object;
};

# An input message
public type EvalRunOutputItemSampleInput record {
    # The role of the message sender (e.g., system, user, developer)
    string role;
    # The content of the message
    string content;
};

# Represents the Queries record for the operation: listInputItems
public type ListInputItemsQueries record {
    # Additional fields to include in the response. See the `include`
    # parameter for Response creation above for more information
    Includable[] include?;
    # An item ID to list items before, used in pagination
    string before?;
    # A limit on the number of objects to be returned. Limit can range between
    # 1 and 100, and the default is 20
    int 'limit = 20;
    # An item ID to list items after, used in pagination
    string after?;
    # The order to return the input items in. Default is `asc`.
    # - `asc`: Return the input items in ascending order.
    # - `desc`: Return the input items in descending order
    "asc"|"desc" 'order?;
};

# The refusal content generated by the assistant
public type MessageContentRefusalObject record {
    string refusal;
    # Always `refusal`
    "refusal" 'type;
};

public type RunStepDetailsMessageCreationObjectMessageCreation record {
    # The ID of the message that was created by this run step
    @jsondata:Name {value: "message_id"}
    string messageId;
};

# The details for events with this `type`
public type AuditLogLoginfailed record {
    # The error message of the failure
    @jsondata:Name {value: "error_message"}
    string errorMessage?;
    # The error code of the failure
    @jsondata:Name {value: "error_code"}
    string errorCode?;
};

# Represents the Queries record for the operation: usage-completions
public type UsageCompletionsQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # Return only usage for these models
    string[] models?;
    # Return only usage for these users
    @http:Query {name: "user_ids"}
    string[] userIds?;
    # Return only usage for these API keys
    @http:Query {name: "api_key_ids"}
    string[] apiKeyIds?;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both
    boolean batch?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them
    @http:Query {name: "group_by"}
    ("project_id"|"user_id"|"api_key_id"|"model"|"batch")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

# The output of a computer tool call
public type ComputerToolCallOutput record {
    # A computer screenshot image used with the computer use tool
    ComputerScreenshotImage output;
    # The safety checks reported by the API that have been acknowledged by the 
    # developer
    @jsondata:Name {value: "acknowledged_safety_checks"}
    ComputerToolCallSafetyCheck[] acknowledgedSafetyChecks?;
    # The ID of the computer tool call output
    string id?;
    # The type of the computer tool call output. Always `computer_call_output`
    "computer_call_output" 'type = "computer_call_output";
    # The ID of the computer tool call that produced the output
    @jsondata:Name {value: "call_id"}
    string callId;
    # The status of the message input. One of `in_progress`, `completed`, or
    # `incomplete`. Populated when input items are returned via API
    "in_progress"|"completed"|"incomplete" status?;
};

public type CreateChatCompletionRequest record {
    *CreateModelResponseProperties;
    *CreateChatCompletionRequestAllOf2;
};

# A CustomDataSourceConfig which specifies the schema of your `item` and optionally `sample` namespaces.
# The response schema defines the shape of the data that will be:
# - Used to define your testing criteria and
# - What data is required when creating a run
public type EvalCustomDataSourceConfig record {
    # The json schema for the run data source items.
    # Learn how to build JSON schemas [here](https://json-schema.org/)
    record {} schema;
    # The type of data source. Always `custom`
    "custom" 'type = "custom";
};

# A list of the categories, and whether they are flagged or not
public type CreateModerationResponseCategories record {
    # Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon
    @jsondata:Name {value: "illicit/violent"}
    boolean? illicitViolent;
    # Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts
    @jsondata:Name {value: "self-harm/instructions"}
    boolean selfHarmInstructions;
    # Content that expresses, incites, or promotes harassing language towards any target
    boolean harassment;
    # Content that depicts death, violence, or physical injury in graphic detail
    @jsondata:Name {value: "violence/graphic"}
    boolean violenceGraphic;
    # Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category
    boolean? illicit;
    # Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders
    @jsondata:Name {value: "self-harm/intent"}
    boolean selfHarmIntent;
    # Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste
    @jsondata:Name {value: "hate/threatening"}
    boolean hateThreatening;
    # Sexual content that includes an individual who is under 18 years old
    @jsondata:Name {value: "sexual/minors"}
    boolean sexualMinors;
    # Harassment content that also includes violence or serious harm towards any target
    @jsondata:Name {value: "harassment/threatening"}
    boolean harassmentThreatening;
    # Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment
    boolean hate;
    # Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders
    @jsondata:Name {value: "self-harm"}
    boolean selfHarm;
    # Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness)
    boolean sexual;
    # Content that depicts death, violence, or physical injury
    boolean violence;
};

public type OrganizationAdminApiKeysBody record {
    string name;
};

# A citation to a file
public type FileCitationBody record {
    # The ID of the file
    @jsondata:Name {value: "file_id"}
    string fileId;
    # The index of the file in the list of files
    int index;
    # The type of the file citation. Always `file_citation`
    "file_citation" 'type = "file_citation";
};

# A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs
public type ModifyAssistantRequestToolResources record {
    @jsondata:Name {value: "code_interpreter"}
    ModifyAssistantRequestToolResourcesCodeInterpreter codeInterpreter?;
    @jsondata:Name {value: "file_search"}
    ModifyAssistantRequestToolResourcesFileSearch fileSearch?;
};

# Usage statistics for the completion request
public type CompletionUsage record {
    # Number of tokens in the generated completion
    @jsondata:Name {value: "completion_tokens"}
    int completionTokens = 0;
    # Number of tokens in the prompt
    @jsondata:Name {value: "prompt_tokens"}
    int promptTokens = 0;
    @jsondata:Name {value: "completion_tokens_details"}
    CompletionUsageCompletionTokensDetails completionTokensDetails?;
    @jsondata:Name {value: "prompt_tokens_details"}
    CompletionUsagePromptTokensDetails promptTokensDetails?;
    # Total number of tokens used in the request (prompt + completion)
    @jsondata:Name {value: "total_tokens"}
    int totalTokens = 0;
};

# Tool call objects
public type RunToolCallObject record {
    # The function definition
    RunToolCallObjectFunction 'function;
    # The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint
    string id;
    # The type of tool call the output is required for. For now, this is always `function`
    "function" 'type;
};

# A vector store is a collection of processed files can be used by the `file_search` tool
public type VectorStoreObject record {
    @jsondata:Name {value: "file_counts"}
    VectorStoreObjectFileCounts fileCounts;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The Unix timestamp (in seconds) for when the vector store will expire
    @jsondata:Name {value: "expires_at"}
    int? expiresAt?;
    @jsondata:Name {value: "expires_after"}
    VectorStoreExpirationAfter expiresAfter?;
    # The Unix timestamp (in seconds) for when the vector store was last active
    @jsondata:Name {value: "last_active_at"}
    int? lastActiveAt;
    # The total number of bytes used by the files in the vector store
    @jsondata:Name {value: "usage_bytes"}
    int usageBytes;
    # The name of the vector store
    string name;
    # The Unix timestamp (in seconds) for when the vector store was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `vector_store`
    "vector_store" 'object;
    # The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use
    "expired"|"in_progress"|"completed" status;
};

# The API Key used to perform the audit logged action
public type AuditLogActorApiKey record {
    @jsondata:Name {value: "service_account"}
    AuditLogActorServiceAccount serviceAccount?;
    # The tracking id of the API key
    string id?;
    # The type of API key. Can be either `user` or `service_account`
    "user"|"service_account" 'type?;
    # The user who performed the audit logged action
    AuditLogActorUser user?;
};

public type AssistantToolsFunction record {
    FunctionObject 'function;
    # The type of tool being defined: `function`
    "function" 'type;
};

# Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint)
public type CreateCompletionResponse record {
    # The Unix timestamp (in seconds) of when the completion was created
    int created;
    # Usage statistics for the completion request
    CompletionUsage usage?;
    # The model used for completion
    string model;
    # A unique identifier for the completion
    string id;
    # The list of completion choices the model generated for the input prompt
    CreateCompletionResponseChoices[] choices;
    # This fingerprint represents the backend configuration that the model runs with.
    # 
    # Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism
    @jsondata:Name {value: "system_fingerprint"}
    string systemFingerprint?;
    # The object type, which is always "text_completion"
    "text_completion" 'object;
};

# Configuration of the transcription model
public type RealtimeTranscriptionSessionCreateResponseInputAudioTranscription record {
    # The model to use for transcription. Can be `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, or `whisper-1`
    "gpt-4o-transcribe"|"gpt-4o-mini-transcribe"|"whisper-1" model?;
    # The language of the input audio. Supplying the input language in
    # [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
    # will improve accuracy and latency
    string language?;
    # An optional text to guide the model's style or continue a previous audio
    # segment. The [prompt](/docs/guides/speech-to-text#prompting) should match
    # the audio language
    string prompt?;
};

# JSON Schema response format. Used to generate structured JSON responses.
# Learn more about [Structured Outputs](/docs/guides/structured-outputs)
public type TextResponseFormatJsonSchema record {
    # The schema for the response format, described as a JSON Schema object.
    # Learn how to build JSON schemas [here](https://json-schema.org/)
    ResponseFormatJsonSchemaSchema schema;
    # The name of the response format. Must be a-z, A-Z, 0-9, or contain
    # underscores and dashes, with a maximum length of 64
    string name;
    # A description of what the response format is for, used by the model to
    # determine how to respond in the format
    string description?;
    # The type of response format being defined. Always `json_schema`
    "json_schema" 'type;
    # Whether to enable strict schema adherence when generating the output.
    # If set to true, the model will always follow the exact schema defined
    # in the `schema` field. Only a subset of JSON Schema is supported when
    # `strict` is `true`. To learn more, read the [Structured Outputs
    # guide](/docs/guides/structured-outputs)
    boolean? strict = false;
};

# Configuration for the DPO fine-tuning method
public type FineTuneDPOMethod record {
    # The hyperparameters used for the fine-tuning job
    FineTuneDPOMethodHyperparameters hyperparameters?;
};

# Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run
public type TruncationObject record {
    # The number of most recent messages from the thread when constructing the context for the run
    @jsondata:Name {value: "last_messages"}
    int? lastMessages?;
    # The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`
    "auto"|"last_messages" 'type;
};

public type QueryItemsString string;

# Represents the Queries record for the operation: listVectorStores
public type ListVectorStoresQueries record {
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

# JSON object response format. An older method of generating JSON responses.
# Using `json_schema` is recommended for models that support it. Note that the
# model will not generate JSON without a system or user message instructing it
# to do so
public type ResponseFormatJsonObject record {
    # The type of response format being defined. Always `json_object`
    "json_object" 'type;
};

public type ChatCompletionRequestAssistantMessageContentPart ChatCompletionRequestMessageContentPartText|ChatCompletionRequestMessageContentPartRefusal;

public type VectorStoreObjectFileCounts record {
    # The number of files that are currently being processed
    @jsondata:Name {value: "in_progress"}
    int inProgress;
    # The total number of files
    int total;
    # The number of files that were cancelled
    int cancelled;
    # The number of files that have been successfully processed
    int completed;
    # The number of files that have failed to process
    int failed;
};

# Represents the Queries record for the operation: usage-costs
public type UsageCostsQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7
    int 'limit = 7;
    # Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them
    @http:Query {name: "group_by"}
    ("project_id"|"line_item")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently only `1d` is supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1d" bucketWidth = "1d";
    # Return only costs for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

public type ProjectUserListResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    ProjectUser[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    string 'object;
};

# Use this option to force the model to call a specific function
public type ToolChoiceFunction record {
    # The name of the function to call
    string name;
    # For function calling, the type is always `function`
    "function" 'type;
};

# An output message from the model
public type OutputMessage record {
    # The role of the output message. Always `assistant`
    "assistant" role;
    # The unique ID of the output message
    string id;
    # The type of the output message. Always `message`
    "message" 'type;
    # The content of the output message
    OutputContent[] content;
    # The status of the message input. One of `in_progress`, `completed`, or
    # `incomplete`. Populated when input items are returned via API
    "in_progress"|"completed"|"incomplete" status;
};

public type ListMessagesResponse record {
    string 'object;
    MessageObject[] data;
    string first_id;
    string last_id;
    boolean has_more;
};

# The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs
public type FineTuningJobHyperparameters record {
    # Number of examples in each batch. A larger batch size means that model parameters
    # are updated less frequently, but with lower variance
    @jsondata:Name {value: "batch_size"}
    "auto"|int batchSize = "auto";
    # The number of epochs to train the model for. An epoch refers to one full cycle
    # through the training dataset
    @jsondata:Name {value: "n_epochs"}
    "auto"|int nEpochs = "auto";
    # Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
    # overfitting
    @jsondata:Name {value: "learning_rate_multiplier"}
    "auto"|decimal learningRateMultiplier = "auto";
};

# Represents the Queries record for the operation: list-project-users
public type ListProjectUsersQueries record {
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

# Learn about [file inputs](/docs/guides/text) for text generation
public type ChatCompletionRequestMessageContentPartFile record {
    ChatCompletionRequestMessageContentPartFileFile file;
    # The type of the content part. Always `file`
    "file" 'type;
};

public type InlineResponse2001 CreateTranslationResponseJson|CreateTranslationResponseVerboseJson;

# A screenshot action
public type Screenshot record {
    # Specifies the event type. For a screenshot action, this property is 
    # always set to `screenshot`
    "screenshot" 'type = "screenshot";
};

public type InlineResponse2003 record {
    boolean deleted?;
    @jsondata:Name {value: "run_id"}
    string runId?;
    string 'object?;
};

public type InlineResponse2002 record {
    boolean deleted;
    @jsondata:Name {value: "eval_id"}
    string evalId;
    string 'object;
};

# The aggregated costs details of the specific time bucket
public type CostsResult record {
    # The monetary value in its associated currency
    CostsResultAmount amount?;
    # When `group_by=line_item`, this field provides the line item of the grouped costs result
    @jsondata:Name {value: "line_item"}
    string? lineItem?;
    # When `group_by=project_id`, this field provides the project ID of the grouped costs result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    "organization.costs.result" 'object;
};

# Represents the Queries record for the operation: listRuns
public type ListRunsQueries record {
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

public type InlineResponse2004 record {
    boolean deleted?;
    string id?;
    string 'object?;
};

public type RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputs RunStepDetailsToolCallsCodeOutputLogsObject|RunStepDetailsToolCallsCodeOutputImageObject;

# Represents a transcription response returned by model, based on the provided input
public type CreateTranscriptionResponseJson record {
    # The transcribed text
    string text;
    # The log probabilities of the tokens in the transcription. Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe` if `logprobs` is added to the `include` array
    CreateTranscriptionResponseJsonLogprobs[] logprobs?;
};

# Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`
public type RunStepCompletionUsage record {
    # Number of completion tokens used over the course of the run step
    @jsondata:Name {value: "completion_tokens"}
    int completionTokens;
    # Number of prompt tokens used over the course of the run step
    @jsondata:Name {value: "prompt_tokens"}
    int promptTokens;
    # Total number of tokens used (prompt + completion)
    @jsondata:Name {value: "total_tokens"}
    int totalTokens;
};

# Output types that you would like the model to generate.
# Most models are capable of generating text, which is the default:
# 
# `["text"]`
# 
# The `gpt-4o-audio-preview` model can also be used to 
# [generate audio](/docs/guides/audio). To request that this model generate 
# both text and audio responses, you can use:
# 
# `["text", "audio"]`
public type ResponseModalities ("text"|"audio")[]?;

public type DeleteVectorStoreFileResponse record {
    boolean deleted;
    string id;
    "vector_store.file.deleted" 'object;
};

# A message input to the model with a role indicating instruction following
# hierarchy. Instructions given with the `developer` or `system` role take
# precedence over instructions given with the `user` role. Messages with the
# `assistant` role are presumed to have been generated by the model in previous
# interactions
public type EvalItem record {
    # The role of the message input. One of `user`, `assistant`, `system`, or
    # `developer`
    "user"|"assistant"|"system"|"developer" role;
    # The type of the message input. Always `message`
    "message" 'type?;
    # Text inputs to the model - can contain template strings
    string|InputTextContent|record {"output_text" 'type; string text;} content;
};

# Defines a function in your own code the model can choose to call. Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling)
public type FunctionTool record {
    # The name of the function to call
    string name;
    anydata description?;
    # The type of the function tool. Always `function`
    "function" 'type = "function";
    anydata strict;
    anydata parameters;
};

# Represents the parsed content of a vector store file
public type VectorStoreFileContentResponse record {
    # The token for the next page, if any
    @jsondata:Name {value: "next_page"}
    string? nextPage;
    # Parsed content of the file
    VectorStoreFileContentResponseData[] data;
    # Indicates if there are more content pages to fetch
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    # The object type, which is always `vector_store.file_content.page`
    "vector_store.file_content.page" 'object;
};

public type BatchErrors record {
    BatchErrorsData[] data?;
    # The object type, which is always `list`
    string 'object?;
};

# Represents an individual service account in a project
public type ProjectServiceAccount record {
    # `owner` or `member`
    "owner"|"member" role;
    # The name of the service account
    string name;
    # The Unix timestamp (in seconds) of when the service account was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `organization.project.service_account`
    "organization.project.service_account" 'object;
};

# A data source config which specifies the metadata property of your stored completions query.
# This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc
public type CreateEvalLogsDataSourceConfig record {
    # Metadata filters for the logs data source
    record {} metadata?;
    # The type of data source. Always `logs`
    "logs" 'type = "logs";
};

public type ProjectListResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    Project[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

public type UsageTimeBucket record {
    UsageTimeBucketResult[] result;
    @jsondata:Name {value: "start_time"}
    int startTime;
    @jsondata:Name {value: "end_time"}
    int endTime;
    "bucket" 'object;
};

# The details for events with this `type`
public type AuditLogProjectupdated record {
    @jsondata:Name {value: "changes_requested"}
    AuditLogProjectupdatedChangesRequested changesRequested?;
    # The project ID
    string id?;
};

# The details for events with this `type`
public type AuditLogProjectarchived record {
    # The project ID
    string id?;
};

# Details on the tool outputs needed for this run to continue
public type RunObjectRequiredActionSubmitToolOutputs record {
    # A list of the relevant tool calls
    @jsondata:Name {value: "tool_calls"}
    RunToolCallObject[] toolCalls;
};

public type FunctionToolCallResourceAllOf2 record {
};

public type CreateTranscriptionRequest record {|
    # The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency
    @jsondata:Name {value: "timestamp_granularities[]"}
    ("word"|"segment")[] timestampGranularities = ["segment"];
    # The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm
    record {byte[] fileContent; string fileName;} file;
    @jsondata:Name {value: "response_format"}
    AudioResponseFormat responseFormat?;
    # If set to true, the model response data will be streamed to the client
    # as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format). 
    # See the [Streaming section of the Speech-to-Text guide](/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)
    # for more information.
    # 
    # Note: Streaming is not supported for the `whisper-1` model and will be ignored
    boolean? 'stream = false;
    # The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit
    decimal temperature = 0;
    # ID of the model to use. The options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open source Whisper V2 model)
    string|"whisper-1"|"gpt-4o-transcribe"|"gpt-4o-mini-transcribe" model;
    # The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency
    string language?;
    # Additional information to include in the transcription response. 
    # `logprobs` will return the log probabilities of the tokens in the 
    # response to understand the model's confidence in the transcription. 
    # `logprobs` only works with response_format set to `json` and only with 
    # the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`
    @jsondata:Name {value: "include[]"}
    TranscriptionInclude[] include?;
    # An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language
    string prompt?;
|};

public type MessageContentTextAnnotationsFileCitationObjectFileCitation record {
    # The ID of the specific File the citation is from
    @jsondata:Name {value: "file_id"}
    string fileId;
};

# Represents the Queries record for the operation: getEvalRunOutputItems
public type GetEvalRunOutputItemsQueries record {
    # Number of output items to retrieve
    int 'limit = 20;
    # Identifier for the last output item from the previous pagination request
    string after?;
    # Filter output items by status. Use `failed` to filter by failed output
    # items or `pass` to filter by passed output items
    "fail"|"pass" status?;
    # Sort order for output items by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`
    "asc"|"desc" 'order = "asc";
};

public type SubmitToolOutputsRunRequestToolOutputs record {
    # The output of the tool call to be submitted to continue the run
    string output?;
    # The ID of the tool call in the `required_action` object within the run object the output is being submitted for
    @jsondata:Name {value: "tool_call_id"}
    string toolCallId?;
};

public type ListBatchesResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId?;
    Batch[] data;
    @jsondata:Name {value: "last_id"}
    string lastId?;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

# An Eval object with a data source config and testing criteria.
# An Eval represents a task to be done for your LLM integration.
# Like:
#  - Improve the quality of my chatbot
#  - See how well my chatbot handles customer support
#  - Check if o3-mini is better at my usecase than gpt-4o
public type Eval record {
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The name of the evaluation
    string name;
    # A list of testing criteria
    @jsondata:Name {value: "testing_criteria"}
    EvalTestingCriteria[] testingCriteria;
    # The Unix timestamp (in seconds) for when the eval was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # Unique identifier for the evaluation
    string id;
    # Configuration of data sources used in runs of the evaluation
    @jsondata:Name {value: "data_source_config"}
    EvalCustomDataSourceConfig|EvalStoredCompletionsDataSourceConfig dataSourceConfig;
    # The object type
    "eval" 'object = "eval";
};

public type CreateEmbeddingResponse record {
    # The list of embeddings generated by the model
    Embedding[] data;
    # The usage information for the request
    CreateEmbeddingResponseUsage usage;
    # The name of the model used to generate the embedding
    string model;
    # The object type, which is always "list"
    "list" 'object;
};

# Controls which (if any) tool is called by the model.
# 
# `none` means the model will not call any tool and instead generates a message.
# 
# `auto` means the model can pick between generating a message or calling one or
# more tools.
# 
# `required` means the model must call one or more tools
public type ToolChoiceOptions "none"|"auto"|"required";

# Messages sent by an end user, containing prompts or additional context
# information
public type ChatCompletionRequestUserMessage record {
    # The role of the messages author, in this case `user`
    "user" role;
    # An optional name for the participant. Provides the model information to differentiate between participants of the same role
    string name?;
    # The contents of the user message
    string|ChatCompletionRequestUserMessageContentPart[] content;
};

# A LabelModelGrader object which uses a model to assign labels to each item
# in the evaluation
public type CreateEvalLabelModelGrader record {
    # A list of chat messages forming the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}
    CreateEvalItem[] input;
    # The name of the grader
    string name;
    # The model to use for the evaluation. Must support structured outputs
    string model;
    # The labels that indicate a passing result. Must be a subset of labels
    @jsondata:Name {value: "passing_labels"}
    string[] passingLabels;
    # The object type, which is always `label_model`
    "label_model" 'type;
    # The labels to classify to each item in the evaluation
    string[] labels;
};

public type ModifyAssistantRequestToolResourcesCodeInterpreter record {
    # Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool
    @jsondata:Name {value: "file_ids"}
    string[] fileIds = [];
};

# Represents the Queries record for the operation: listFilesInVectorStoreBatch
public type ListFilesInVectorStoreBatchQueries record {
    # Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`
    "in_progress"|"completed"|"failed"|"cancelled" filter?;
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

# The payload used to update the user
public type AuditLogUserupdatedChangesRequested record {
    # The role of the user. Is either `owner` or `member`
    string role?;
};

public type ModifyMessageRequest record {|
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
|};

# The details for events with this `type`
public type AuditLogApiKeycreated record {
    # The payload used to create the API key
    AuditLogApiKeycreatedData data?;
    # The tracking ID of the API key
    string id?;
};

# The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
# 
# Omitting `parameters` defines a function with an empty parameter list
public type FunctionParameters record {
};

public type ProjectCreateRequest record {
    # The friendly name of the project, this name appears in reports
    string name;
};

# Data about a previous audio response from the model. 
# [Learn more](/docs/guides/audio)
public type ChatCompletionRequestAssistantMessageAudio record {
    # Unique identifier for a previous audio response from the model
    string id;
};

# A list of the categories along with the input type(s) that the score applies to
public type CreateModerationResponseCategoryAppliedInputTypes record {
    # The applied input type(s) for the category 'illicit/violent'
    @jsondata:Name {value: "illicit/violent"}
    ("text")[] illicitViolent;
    # The applied input type(s) for the category 'self-harm/instructions'
    @jsondata:Name {value: "self-harm/instructions"}
    ("text"|"image")[] selfHarmInstructions;
    # The applied input type(s) for the category 'harassment'
    ("text")[] harassment;
    # The applied input type(s) for the category 'violence/graphic'
    @jsondata:Name {value: "violence/graphic"}
    ("text"|"image")[] violenceGraphic;
    # The applied input type(s) for the category 'illicit'
    ("text")[] illicit;
    # The applied input type(s) for the category 'self-harm/intent'
    @jsondata:Name {value: "self-harm/intent"}
    ("text"|"image")[] selfHarmIntent;
    # The applied input type(s) for the category 'hate/threatening'
    @jsondata:Name {value: "hate/threatening"}
    ("text")[] hateThreatening;
    # The applied input type(s) for the category 'sexual/minors'
    @jsondata:Name {value: "sexual/minors"}
    ("text")[] sexualMinors;
    # The applied input type(s) for the category 'harassment/threatening'
    @jsondata:Name {value: "harassment/threatening"}
    ("text")[] harassmentThreatening;
    # The applied input type(s) for the category 'hate'
    ("text")[] hate;
    # The applied input type(s) for the category 'self-harm'
    @jsondata:Name {value: "self-harm"}
    ("text"|"image")[] selfHarm;
    # The applied input type(s) for the category 'sexual'
    ("text"|"image")[] sexual;
    # The applied input type(s) for the category 'violence'
    ("text"|"image")[] violence;
};

# The output of a function tool call
public type FunctionToolCallOutput record {
    # A JSON string of the output of the function tool call
    string output;
    # The unique ID of the function tool call output. Populated when this item
    # is returned via API
    string id?;
    # The type of the function tool call output. Always `function_call_output`
    "function_call_output" 'type;
    # The unique ID of the function tool call generated by the model
    @jsondata:Name {value: "call_id"}
    string callId;
    # The status of the item. One of `in_progress`, `completed`, or
    # `incomplete`. Populated when items are returned via API
    "in_progress"|"completed"|"incomplete" status?;
};

public type EvalJsonlFileContentSourceContent record {
    record {} item;
    record {} sample?;
};

# The aggregated embeddings usage details of the specific time bucket
public type UsageEmbeddingsResult record {
    # The count of requests made to the model
    @jsondata:Name {value: "num_model_requests"}
    int numModelRequests;
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    # When `group_by=user_id`, this field provides the user ID of the grouped usage result
    @jsondata:Name {value: "user_id"}
    string? userId?;
    # When `group_by=model`, this field provides the model name of the grouped usage result
    string? model?;
    # The aggregated number of input tokens used
    @jsondata:Name {value: "input_tokens"}
    int inputTokens;
    # When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result
    @jsondata:Name {value: "api_key_id"}
    string? apiKeyId?;
    "organization.usage.embeddings.result" 'object;
};

public type VectorStoreSearchResultsPage record {|
    # The token for the next page, if any
    @jsondata:Name {value: "next_page"}
    string? nextPage;
    # The list of search result items
    VectorStoreSearchResultItem[] data;
    # Indicates if there are more results to fetch
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    @jsondata:Name {value: "search_query"}
    VectorStoreSearchResultsPageSearchqueryItemsString[] searchQuery;
    # The object type, which is always `vector_store.search_results.page`
    "vector_store.search_results.page" 'object;
|};

# The project that the action was scoped to. Absent for actions not scoped to projects
public type AuditLogProject record {
    # The project title
    string name?;
    # The project ID
    string id?;
};

# Ephemeral key returned by the API
public type RealtimeSessionCreateResponseClientSecret record {
    # Timestamp for when the token expires. Currently, all tokens expire
    # after one minute
    @jsondata:Name {value: "expires_at"}
    int expiresAt;
    # Ephemeral key usable in client environments to authenticate connections
    # to the Realtime API. Use this in client-side environments rather than
    # a standard API token, which should only be used server-side
    string value;
};

# Represents the Queries record for the operation: listBatches
public type ListBatchesQueries record {
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

public type Batch record {
    # The Unix timestamp (in seconds) for when the batch was cancelled
    @jsondata:Name {value: "cancelled_at"}
    int cancelledAt?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    @jsondata:Name {value: "request_counts"}
    BatchRequestCounts requestCounts?;
    # The ID of the input file for the batch
    @jsondata:Name {value: "input_file_id"}
    string inputFileId;
    # The ID of the file containing the outputs of successfully executed requests
    @jsondata:Name {value: "output_file_id"}
    string outputFileId?;
    # The ID of the file containing the outputs of requests with errors
    @jsondata:Name {value: "error_file_id"}
    string errorFileId?;
    # The Unix timestamp (in seconds) for when the batch was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The Unix timestamp (in seconds) for when the batch started processing
    @jsondata:Name {value: "in_progress_at"}
    int inProgressAt?;
    # The Unix timestamp (in seconds) for when the batch expired
    @jsondata:Name {value: "expired_at"}
    int expiredAt?;
    # The Unix timestamp (in seconds) for when the batch started finalizing
    @jsondata:Name {value: "finalizing_at"}
    int finalizingAt?;
    # The Unix timestamp (in seconds) for when the batch was completed
    @jsondata:Name {value: "completed_at"}
    int completedAt?;
    # The OpenAI API endpoint used by the batch
    string endpoint;
    # The Unix timestamp (in seconds) for when the batch will expire
    @jsondata:Name {value: "expires_at"}
    int expiresAt?;
    # The Unix timestamp (in seconds) for when the batch started cancelling
    @jsondata:Name {value: "cancelling_at"}
    int cancellingAt?;
    # The time frame within which the batch should be processed
    @jsondata:Name {value: "completion_window"}
    string completionWindow;
    string id;
    # The Unix timestamp (in seconds) for when the batch failed
    @jsondata:Name {value: "failed_at"}
    int failedAt?;
    BatchErrors errors?;
    # The object type, which is always `batch`
    "batch" 'object;
    # The current status of the batch
    "validating"|"failed"|"in_progress"|"finalizing"|"completed"|"expired"|"cancelling"|"cancelled" status;
};

public type AssistantObjectToolResourcesCodeInterpreter record {
    # A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool
    @jsondata:Name {value: "file_ids"}
    string[] fileIds = [];
};

public type CompleteUploadRequest record {|
    # The ordered list of Part IDs
    @jsondata:Name {value: "part_ids"}
    string[] partIds;
    # The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect
    string md5?;
|};

# A text input to the model
public type InputTextContent record {
    # The text input to the model
    string text;
    # The type of the input item. Always `input_text`
    "input_text" 'type = "input_text";
};

# A schema representing an evaluation run
public type EvalRun record {
    # Results per testing criteria applied during the evaluation run
    @jsondata:Name {value: "per_testing_criteria_results"}
    EvalRunPerTestingCriteriaResults[] perTestingCriteriaResults;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The identifier of the associated evaluation
    @jsondata:Name {value: "eval_id"}
    string evalId;
    # The URL to the rendered evaluation run report on the UI dashboard
    @jsondata:Name {value: "report_url"}
    string reportUrl;
    # Unix timestamp (in seconds) when the evaluation run was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # An object representing an error response from the Eval API
    EvalApiError 'error;
    # Information about the run's data source
    @jsondata:Name {value: "data_source"}
    CreateEvalJsonlRunDataSource|CreateEvalCompletionsRunDataSource|CreateEvalResponsesRunDataSource dataSource;
    @jsondata:Name {value: "result_counts"}
    EvalRunResultCounts resultCounts;
    # The name of the evaluation run
    string name;
    # The model that is evaluated, if applicable
    string model;
    # Unique identifier for the evaluation run
    string id;
    # Usage statistics for each model during the evaluation run
    @jsondata:Name {value: "per_model_usage"}
    EvalRunPerModelUsage[] perModelUsage;
    # The type of the object. Always "eval.run"
    "eval.run" 'object = "eval.run";
    # The status of the evaluation run
    string status;
};

# Represents the Queries record for the operation: getCertificate
public type GetCertificateQueries record {
    # A list of additional fields to include in the response. Currently the only supported value is `content` to fetch the PEM content of the certificate
    ("content")[] include?;
};

# Not supported with latest reasoning models `o3` and `o4-mini`.
# 
# Up to 4 sequences where the API will stop generating further tokens. The
# returned text will not contain the stop sequence
public type StopConfiguration StopConfigurationOneOf1|StopConfigurationStopConfigurationOneOf12??;

public type TranscriptionInclude "logprobs";

# For `gpt-image-1` only, the token usage information for the image generation
public type ImagesResponseUsage record {
    @jsondata:Name {value: "input_tokens_details"}
    ImagesResponseUsageInputTokensDetails inputTokensDetails;
    # The total number of tokens (images and text) used for the image generation
    @jsondata:Name {value: "total_tokens"}
    int totalTokens;
    # The number of image tokens in the output image
    @jsondata:Name {value: "output_tokens"}
    int outputTokens;
    # The number of tokens (images and text) in the input prompt
    @jsondata:Name {value: "input_tokens"}
    int inputTokens;
};

public type ProjectRateLimitUpdateRequest record {
    # The maximum batch input tokens per day. Only relevant for certain models
    @jsondata:Name {value: "batch_1_day_max_input_tokens"}
    int batch1DayMaxInputTokens?;
    # The maximum tokens per minute
    @jsondata:Name {value: "max_tokens_per_1_minute"}
    int maxTokensPer1Minute?;
    # The maximum images per minute. Only relevant for certain models
    @jsondata:Name {value: "max_images_per_1_minute"}
    int maxImagesPer1Minute?;
    # The maximum audio megabytes per minute. Only relevant for certain models
    @jsondata:Name {value: "max_audio_megabytes_per_1_minute"}
    int maxAudioMegabytesPer1Minute?;
    # The maximum requests per minute
    @jsondata:Name {value: "max_requests_per_1_minute"}
    int maxRequestsPer1Minute?;
    # The maximum requests per day. Only relevant for certain models
    @jsondata:Name {value: "max_requests_per_1_day"}
    int maxRequestsPer1Day?;
};

# The payload used to create the invite
public type AuditLogInvitesentData record {
    # The role the email was invited to be. Is either `owner` or `member`
    string role?;
    # The email invited to the organization
    string email?;
};

public type CreateFileRequest record {|
    # The File object (not file name) to be uploaded
    record {byte[] fileContent; string fileName;} file;
    # The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets
    "assistants"|"batch"|"fine-tune"|"vision"|"user_data"|"evals" purpose;
|};

public type ModelIdsSharedAnyOf1 string;

# A computer screenshot image used with the computer use tool
public type ComputerScreenshotImage record {
    # The URL of the screenshot image
    @jsondata:Name {value: "image_url"}
    string imageUrl?;
    # The identifier of an uploaded file that contains the screenshot
    @jsondata:Name {value: "file_id"}
    string fileId?;
    # Specifies the event type. For a computer screenshot, this property is 
    # always set to `computer_screenshot`
    "computer_screenshot" 'type = "computer_screenshot";
};

# The payload used to update the organization settings
public type AuditLogOrganizationupdatedChangesRequested record {
    AuditLogOrganizationupdatedChangesRequestedSettings settings?;
    # The organization name
    string name?;
    # The organization description
    string description?;
    # The organization title
    string title?;
};

public type InputItem EasyInputMessage|Item|ItemReferenceParam;

public type ModelResponseProperties record {
    # An alternative to sampling with temperature, called nucleus sampling,
    # where the model considers the results of the tokens with top_p probability
    # mass. So 0.1 means only the tokens comprising the top 10% probability mass
    # are considered.
    # 
    # We generally recommend altering this or `temperature` but not both
    @jsondata:Name {value: "top_p"}
    decimal? topP = 1;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    # We generally recommend altering this or `top_p` but not both
    decimal? temperature = 1;
    @jsondata:Name {value: "service_tier"}
    ServiceTier? serviceTier?;
    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)
    string user?;
};

# A tool call to a computer use tool. See the 
# [computer use guide](/docs/guides/tools-computer-use) for more information
public type ComputerToolCall record {
    # The pending safety checks for the computer call
    @jsondata:Name {value: "pending_safety_checks"}
    ComputerToolCallSafetyCheck[] pendingSafetyChecks;
    ComputerAction action;
    # The unique ID of the computer call
    string id;
    # The type of the computer call. Always `computer_call`
    "computer_call" 'type = "computer_call";
    # An identifier used when responding to the tool call with output
    @jsondata:Name {value: "call_id"}
    string callId;
    # The status of the item. One of `in_progress`, `completed`, or
    # `incomplete`. Populated when items are returned via API
    "in_progress"|"completed"|"incomplete" status;
};

# Represents a message within a [thread](/docs/api-reference/threads)
public type MessageObject record {
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The entity that produced the message. One of `user` or `assistant`
    "user"|"assistant" role;
    # If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message
    @jsondata:Name {value: "assistant_id"}
    string? assistantId;
    # The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints
    @jsondata:Name {value: "run_id"}
    string? runId;
    # A list of files attached to the message, and the tools they were added to
    CreateMessageRequestAttachments[]? attachments;
    # The Unix timestamp (in seconds) for when the message was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The content of the message in array of text and/or images
    MessageObjectContent[] content;
    # The Unix timestamp (in seconds) for when the message was completed
    @jsondata:Name {value: "completed_at"}
    int? completedAt;
    # The [thread](/docs/api-reference/threads) ID that this message belongs to
    @jsondata:Name {value: "thread_id"}
    string threadId;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The Unix timestamp (in seconds) for when the message was marked as incomplete
    @jsondata:Name {value: "incomplete_at"}
    int? incompleteAt;
    @jsondata:Name {value: "incomplete_details"}
    MessageObjectIncompleteDetails? incompleteDetails;
    # The object type, which is always `thread.message`
    "thread.message" 'object;
    # The status of the message, which can be either `in_progress`, `incomplete`, or `completed`
    "in_progress"|"incomplete"|"completed" status;
};

# Represents the Queries record for the operation: list-users
public type ListUsersQueries record {
    # Filter by the email address of users
    string[] emails?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

# The session in which the audit logged action was performed
public type AuditLogActorSession record {
    # The IP address from which the action was performed
    @jsondata:Name {value: "ip_address"}
    string ipAddress?;
    # The user who performed the audit logged action
    AuditLogActorUser user?;
};

# Represents an individual user in a project
public type ProjectUser record {
    # The Unix timestamp (in seconds) of when the project was added
    @jsondata:Name {value: "added_at"}
    int addedAt;
    # `owner` or `member`
    "owner"|"member" role;
    # The name of the user
    string name;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The email address of the user
    string email;
    # The object type, which is always `organization.project.user`
    "organization.project.user" 'object;
};

# A StoredCompletionsRunDataSource configuration describing a set of filters
public type EvalStoredCompletionsSource record {
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # An optional Unix timestamp to filter items created after this time
    @jsondata:Name {value: "created_after"}
    int? createdAfter?;
    # An optional Unix timestamp to filter items created before this time
    @jsondata:Name {value: "created_before"}
    int? createdBefore?;
    # An optional maximum number of items to return
    int? 'limit?;
    # An optional model to filter by (e.g., 'gpt-4o')
    string? model?;
    # The type of source. Always `stored_completions`
    "stored_completions" 'type = "stored_completions";
};

# Static predicted output content, such as the content of a text file that is
# being regenerated
public type PredictionContent record {
    # The type of the predicted content you want to provide. This type is
    # currently always `content`
    "content" 'type;
    # The content that should be matched when generating a model response.
    # If generated tokens would match this content, the entire model response
    # can be returned much more quickly
    string|ChatCompletionRequestMessageContentPartText[] content;
};

public type ChatCompletionTokenLogprob record {
    # List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned
    @jsondata:Name {value: "top_logprobs"}
    ChatCompletionTokenLogprobTopLogprobs[] topLogprobs;
    # The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely
    decimal logprob;
    # A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token
    int[]? bytes;
    # The token
    string token;
};

public type OutputItem OutputMessage|FileSearchToolCall|FunctionToolCall|WebSearchToolCall|ComputerToolCall|ReasoningItem;

public type ChatCompletionRequestMessage ChatCompletionRequestDeveloperMessage|ChatCompletionRequestSystemMessage|ChatCompletionRequestUserMessage|ChatCompletionRequestAssistantMessage|ChatCompletionRequestToolMessage|ChatCompletionRequestFunctionMessage;

# Represents the content or the URL of an image generated by the OpenAI API
public type Image record {
    # For `dall-e-3` only, the revised prompt that was used to generate the image
    @jsondata:Name {value: "revised_prompt"}
    string revisedPrompt?;
    # The base64-encoded JSON of the generated image. Default value for `gpt-image-1`, and only present if `response_format` is set to `b64_json` for `dall-e-2` and `dall-e-3`
    @jsondata:Name {value: "b64_json"}
    string b64Json?;
    # When using `dall-e-2` or `dall-e-3`, the URL of the generated image if `response_format` is set to `url` (default value). Unsupported for `gpt-image-1`
    string url?;
};

# The hyperparameters used for the fine-tuning job
public type FineTuneSupervisedMethodHyperparameters record {
    # Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance
    @jsondata:Name {value: "batch_size"}
    "auto"|int batchSize = "auto";
    # The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset
    @jsondata:Name {value: "n_epochs"}
    "auto"|int nEpochs = "auto";
    # Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting
    @jsondata:Name {value: "learning_rate_multiplier"}
    "auto"|decimal learningRateMultiplier = "auto";
};

# The hyperparameters used for the fine-tuning job.
# This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter
# 
# # Deprecated
@deprecated
public type CreateFineTuningJobRequestHyperparameters record {
    # Number of examples in each batch. A larger batch size means that model parameters
    # are updated less frequently, but with lower variance
    @jsondata:Name {value: "batch_size"}
    "auto"|int batchSize = "auto";
    # The number of epochs to train the model for. An epoch refers to one full cycle
    # through the training dataset
    @jsondata:Name {value: "n_epochs"}
    "auto"|int nEpochs = "auto";
    # Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
    # overfitting
    @jsondata:Name {value: "learning_rate_multiplier"}
    "auto"|decimal learningRateMultiplier = "auto";
};

# A filter used to compare a specified attribute key to a given value using a defined comparison operation
public type ComparisonFilter record {|
    # Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.
    # - `eq`: equals
    # - `ne`: not equal
    # - `gt`: greater than
    # - `gte`: greater than or equal
    # - `lt`: less than
    # - `lte`: less than or equal
    "eq"|"ne"|"gt"|"gte"|"lt"|"lte" 'type = "eq";
    # The value to compare against the attribute key; supports string, number, or boolean types
    string|decimal|boolean value;
    # The key to compare against the value
    string 'key;
|};

public type RealtimeResponseCreateParamsTools record {
    # The name of the function
    string name?;
    # The description of the function, including guidance on when and how 
    # to call it, and guidance about what to tell the user when calling 
    # (if anything)
    string description?;
    # The type of the tool, i.e. `function`
    "function" 'type?;
    # Parameters of the function in JSON Schema
    record {} parameters?;
};

# The hyperparameters used for the fine-tuning job
public type FineTuneDPOMethodHyperparameters record {
    # Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance
    @jsondata:Name {value: "batch_size"}
    "auto"|int batchSize = "auto";
    # The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset
    @jsondata:Name {value: "n_epochs"}
    "auto"|int nEpochs = "auto";
    # The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model
    "auto"|decimal beta = "auto";
    # Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting
    @jsondata:Name {value: "learning_rate_multiplier"}
    "auto"|decimal learningRateMultiplier = "auto";
};

# Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
# Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
# Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency
public type RealtimeTranscriptionSessionCreateRequestTurnDetection record {
    # Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults 
    # to 500ms. With shorter values the model will respond more quickly, 
    # but may jump in on short pauses from the user
    @jsondata:Name {value: "silence_duration_ms"}
    int silenceDurationMs?;
    # Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions
    @jsondata:Name {value: "create_response"}
    boolean createResponse = true;
    # Whether or not to automatically interrupt any ongoing response with output to the default
    # conversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions
    @jsondata:Name {value: "interrupt_response"}
    boolean interruptResponse = true;
    # Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in 
    # milliseconds). Defaults to 300ms
    @jsondata:Name {value: "prefix_padding_ms"}
    int prefixPaddingMs?;
    # Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`
    "low"|"medium"|"high"|"auto" eagerness = "auto";
    # Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
    # higher threshold will require louder audio to activate the model, and 
    # thus might perform better in noisy environments
    decimal threshold?;
    # Type of turn detection
    "server_vad"|"semantic_vad" 'type = "server_vad";
};

public type VectorStoreSearchResultsPageSearchqueryItemsString string;

# The details for events with this `type`
public type AuditLogCertificatedeleted record {
    # The name of the certificate
    string name?;
    # The certificate content in PEM format
    string certificate?;
    # The certificate ID
    string id?;
};

# The project and fine-tuned model checkpoint that the checkpoint permission was created for
public type AuditLogCheckpointPermissioncreated record {
    # The payload used to create the checkpoint permission
    AuditLogCheckpointPermissioncreatedData data?;
    # The ID of the checkpoint permission
    string id?;
};

# The schema for the response format, described as a JSON Schema object.
# Learn how to build JSON schemas [here](https://json-schema.org/)
public type ResponseFormatJsonSchemaSchema record {
};

@deprecated
public type ChatCompletionFunctions record {
    # The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64
    string name;
    # A description of what the function does, used by the model to choose when and how to call the function
    string description?;
    # The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
    # 
    # Omitting `parameters` defines a function with an empty parameter list
    FunctionParameters parameters?;
};

# Represents the Queries record for the operation: list-project-rate-limits
public type ListProjectRateLimitsQueries record {
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. The default is 100
    int 'limit = 100;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

# Realtime transcription session object configuration
public type RealtimeTranscriptionSessionCreateRequest record {
    # The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
    # For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
    # single channel (mono), and little-endian byte order
    @jsondata:Name {value: "input_audio_format"}
    "pcm16"|"g711_ulaw"|"g711_alaw" inputAudioFormat = "pcm16";
    # The set of items to include in the transcription. Current available items are:
    # - `item.input_audio_transcription.logprobs`
    string[] include?;
    # The set of modalities the model can respond with. To disable audio,
    # set this to ["text"]
    ("text"|"audio")[] modalities?;
    @jsondata:Name {value: "input_audio_noise_reduction"}
    RealtimeSessionInputAudioNoiseReduction inputAudioNoiseReduction?;
    @jsondata:Name {value: "input_audio_transcription"}
    RealtimeTranscriptionSessionCreateRequestInputAudioTranscription inputAudioTranscription?;
    @jsondata:Name {value: "turn_detection"}
    RealtimeTranscriptionSessionCreateRequestTurnDetection turnDetection?;
};

public type AssistantToolsCode record {
    # The type of tool being defined: `code_interpreter`
    "code_interpreter" 'type;
};

# A URL citation when using web search
public type ChatCompletionResponseMessageUrlCitation record {
    # The index of the first character of the URL citation in the message
    @jsondata:Name {value: "start_index"}
    int startIndex;
    # The index of the last character of the URL citation in the message
    @jsondata:Name {value: "end_index"}
    int endIndex;
    # The title of the web resource
    string title;
    # The URL of the web resource
    string url;
};

# Represents the Queries record for the operation: listOrganizationCertificates
public type ListOrganizationCertificatesQueries record {
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

# This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API
public type OtherChunkingStrategyResponseParam record {|
    # Always `other`
    "other" 'type;
|};

public type CreateModelResponseProperties ModelResponseProperties;

public type BatchesBody record {
    # The endpoint to be used for all requests in the batch. Currently `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch
    "/v1/responses"|"/v1/chat/completions"|"/v1/embeddings"|"/v1/completions" endpoint;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The ID of an uploaded file that contains requests for the new batch.
    # 
    # See [upload file](/docs/api-reference/files/create) for how to upload a file.
    # 
    # Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size
    @jsondata:Name {value: "input_file_id"}
    string inputFileId;
    # The time frame within which the batch should be processed. Currently only `24h` is supported
    @jsondata:Name {value: "completion_window"}
    "24h" completionWindow;
};

# Learn about [image inputs](/docs/guides/vision)
public type ChatCompletionRequestMessageContentPartImage record {
    @jsondata:Name {value: "image_url"}
    ChatCompletionRequestMessageContentPartImageImageUrl imageUrl;
    # The type of the content part
    "image_url" 'type;
};

# The user who performed the audit logged action
public type AuditLogActorUser record {
    # The user id
    string id?;
    # The user email
    string email?;
};

public type CreateVectorStoreFileBatchRequest record {|
    @jsondata:Name {value: "chunking_strategy"}
    ChunkingStrategyRequestParam chunkingStrategy?;
    # A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files
    @jsondata:Name {value: "file_ids"}
    string[] fileIds;
    # Set of 16 key-value pairs that can be attached to an object. This can be 
    # useful for storing additional information about the object in a structured 
    # format, and querying for objects via API or the dashboard. Keys are strings 
    # with a maximum length of 64 characters. Values are strings with a maximum 
    # length of 512 characters, booleans, or numbers
    VectorStoreFileAttributes? attributes?;
|};

public type ProjectUserUpdateRequest record {
    # `owner` or `member`
    "owner"|"member" role;
};

public type AdminApiKeyOwner record {
    # Always `owner`
    string role?;
    # The name of the user
    string name?;
    # The Unix timestamp (in seconds) of when the user was created
    @jsondata:Name {value: "created_at"}
    int createdAt?;
    # The identifier, which can be referenced in API endpoints
    string id?;
    # Always `user`
    string 'type?;
    # The object type, which is always organization.user
    string 'object?;
};

# Options to create a new thread. If no thread is provided when running a 
# request, an empty thread will be created
public type CreateThreadRequest record {|
    @jsondata:Name {value: "tool_resources"}
    CreateThreadRequestToolResources? toolResources?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # A list of [messages](/docs/api-reference/messages) to start the thread with
    CreateMessageRequest[] messages?;
|};

public type ModifyAssistantRequestToolResourcesFileSearch record {
    # Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant
    @jsondata:Name {value: "vector_store_ids"}
    string[] vectorStoreIds?;
};

# A schema representing an evaluation run output item
public type EvalRunOutputItem record {
    # Details of the input data source item
    @jsondata:Name {value: "datasource_item"}
    record {} datasourceItem;
    # The identifier of the evaluation run associated with this output item
    @jsondata:Name {value: "run_id"}
    string runId;
    # The identifier of the evaluation group
    @jsondata:Name {value: "eval_id"}
    string evalId;
    # Unix timestamp (in seconds) when the evaluation run was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The identifier for the data source item
    @jsondata:Name {value: "datasource_item_id"}
    int datasourceItemId;
    # Unique identifier for the evaluation run output item
    string id;
    # A list of results from the evaluation run
    record {}[] results;
    # A sample containing the input and output of the evaluation run
    EvalRunOutputItemSample sample;
    # The type of the object. Always "eval.run.output_item"
    "eval.run.output_item" 'object = "eval.run.output_item";
    # The status of the evaluation run
    string status;
};

public type CreateThreadRequestToolResourcesFileSearch anydata;

# The Upload object can accept byte chunks in the form of Parts
public type Upload record {
    # The name of the file to be uploaded
    string filename;
    # The Unix timestamp (in seconds) for when the Upload will expire
    @jsondata:Name {value: "expires_at"}
    int expiresAt;
    OpenAIFile file?;
    # The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values
    string purpose;
    # The intended number of bytes to be uploaded
    int bytes;
    # The Unix timestamp (in seconds) for when the Upload was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The Upload unique identifier, which can be referenced in API endpoints
    string id;
    # The status of the Upload
    "pending"|"completed"|"cancelled"|"expired" status;
    # The object type, which is always "upload"
    "upload" 'object?;
};

public type ModifyCertificateRequest record {
    # The updated name for the certificate
    string name;
};

public type FunctionToolCallOutputResourceAllOf2 record {
};

# The last error associated with this vector store file. Will be `null` if there are no errors
public type VectorStoreFileObjectLastError record {
    # One of `server_error` or `rate_limit_exceeded`
    "server_error"|"unsupported_file"|"invalid_file" code;
    # A human-readable description of the error
    string message;
};

# The aggregated code interpreter sessions usage details of the specific time bucket
public type UsageCodeInterpreterSessionsResult record {
    # The number of code interpreter sessions
    @jsondata:Name {value: "num_sessions"}
    int numSessions?;
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    "organization.usage.code_interpreter_sessions.result" 'object;
};

# Represents the Queries record for the operation: getResponse
public type GetResponseQueries record {
    # Additional fields to include in the response. See the `include`
    # parameter for Response creation above for more information
    Includable[] include?;
};

# The aggregated audio speeches usage details of the specific time bucket
public type UsageAudioSpeechesResult record {
    # The number of characters processed
    int characters;
    # The count of requests made to the model
    @jsondata:Name {value: "num_model_requests"}
    int numModelRequests;
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    # When `group_by=user_id`, this field provides the user ID of the grouped usage result
    @jsondata:Name {value: "user_id"}
    string? userId?;
    # When `group_by=model`, this field provides the model name of the grouped usage result
    string? model?;
    # When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result
    @jsondata:Name {value: "api_key_id"}
    string? apiKeyId?;
    "organization.usage.audio_speeches.result" 'object;
};

# Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.)
public type RunCompletionUsage record {
    # Number of completion tokens used over the course of the run
    @jsondata:Name {value: "completion_tokens"}
    int completionTokens;
    # Number of prompt tokens used over the course of the run
    @jsondata:Name {value: "prompt_tokens"}
    int promptTokens;
    # Total number of tokens used (prompt + completion)
    @jsondata:Name {value: "total_tokens"}
    int totalTokens;
};

# Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model
# 
# # Deprecated
@deprecated
public type ChatCompletionResponseMessageFunctionCall record {
    # The name of the function to call
    string name;
    # The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function
    string arguments;
};

public type CreateCompletionResponseChoices record {
    # The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    # `length` if the maximum number of tokens specified in the request was reached,
    # or `content_filter` if content was omitted due to a flag from our content filters
    @jsondata:Name {value: "finish_reason"}
    "stop"|"length"|"content_filter" finishReason;
    int index;
    string text;
    CreateCompletionResponseLogprobs? logprobs;
};

# The response from the image generation endpoint
public type ImagesResponse record {
    # The list of generated images
    Image[] data?;
    # The Unix timestamp (in seconds) of when the image was created
    int created;
    # For `gpt-image-1` only, the token usage information for the image generation
    ImagesResponseUsage usage?;
};

public type DeleteModelResponse record {
    boolean deleted;
    string id;
    string 'object;
};

# The method used for fine-tuning
public type FineTuneMethod record {
    # Configuration for the supervised fine-tuning method
    FineTuneSupervisedMethod supervised?;
    # Configuration for the DPO fine-tuning method
    FineTuneDPOMethod dpo?;
    # The type of method. Is either `supervised` or `dpo`
    "supervised"|"dpo" 'type?;
};

public type ListAuditLogsResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    AuditLog[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

public type ChatCompletionRequestMessageContentPartFileFile record {
    # The name of the file, used when passing the file to the model as a 
    # string
    string filename?;
    # The ID of an uploaded file to use as input
    @jsondata:Name {value: "file_id"}
    string fileId?;
    # The base64 encoded file data, used when passing the file to the model 
    # as a string
    @jsondata:Name {value: "file_data"}
    string fileData?;
};

public type VectorStoreFileBatchObjectFileCounts record {
    # The number of files that are currently being processed
    @jsondata:Name {value: "in_progress"}
    int inProgress;
    # The total number of files
    int total;
    # The number of files that where cancelled
    int cancelled;
    # The number of files that have been processed
    int completed;
    # The number of files that have failed to process
    int failed;
};

# An object representing a list of runs for an evaluation
public type EvalRunList record {
    # The identifier of the first eval run in the data array
    @jsondata:Name {value: "first_id"}
    string firstId;
    # An array of eval run objects
    EvalRun[] data;
    # The identifier of the last eval run in the data array
    @jsondata:Name {value: "last_id"}
    string lastId;
    # Indicates whether there are more evals available
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    # The type of this object. It is always set to "list"
    "list" 'object = "list";
};

public type Annotation FileCitationBody|UrlCitationBody|FilePath;

public type FileSearchToolCallResults record {
    # The relevance score of the file - a value between 0 and 1
    float score?;
    # The name of the file
    string filename?;
    # The unique ID of the file
    @jsondata:Name {value: "file_id"}
    string fileId?;
    # Set of 16 key-value pairs that can be attached to an object. This can be 
    # useful for storing additional information about the object in a structured 
    # format, and querying for objects via API or the dashboard. Keys are strings 
    # with a maximum length of 64 characters. Values are strings with a maximum 
    # length of 512 characters, booleans, or numbers
    VectorStoreFileAttributes? attributes?;
    # The text that was retrieved from the file
    string text?;
};

# Represents the Queries record for the operation: listChatCompletions
public type ListChatCompletionsQueries record {
    # A list of metadata keys to filter the Chat Completions by. Example:
    # 
    # `metadata[key1]=value1&metadata[key2]=value2`
    Metadata? metadata?;
    # Number of Chat Completions to retrieve
    int 'limit = 20;
    # The model used to generate the Chat Completions
    string model?;
    # Identifier for the last chat completion from the previous pagination request
    string after?;
    # Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`
    "asc"|"desc" 'order = "asc";
};

public type ListModelsResponse record {
    Model[] data;
    "list" 'object;
};

# A drag action
public type Drag record {
    # An array of coordinates representing the path of the drag action. Coordinates will appear as an array
    # of objects, eg
    # ```
    # [
    #   { x: 100, y: 200 },
    #   { x: 200, y: 300 }
    # ]
    # ```
    Coordinate[] path;
    # Specifies the event type. For a drag action, this property is 
    # always set to `drag`
    "drag" 'type = "drag";
};

# **o-series models only**
# 
# Configuration options for 
# [reasoning models](https://platform.openai.com/docs/guides/reasoning)
public type Reasoning record {
    # A summary of the reasoning performed by the model. This can be
    # useful for debugging and understanding the model's reasoning process.
    # One of `auto`, `concise`, or `detailed`
    "auto"|"concise"|"detailed"? summary?;
    # **o-series models only** 
    # 
    # Constrains effort on reasoning for 
    # [reasoning models](https://platform.openai.com/docs/guides/reasoning).
    # Currently supported values are `low`, `medium`, and `high`. Reducing
    # reasoning effort can result in faster responses and fewer tokens used
    # on reasoning in a response
    ReasoningEffort? effort?;
    # **Deprecated:** use `summary` instead.
    # 
    # A summary of the reasoning performed by the model. This can be
    # useful for debugging and understanding the model's reasoning process.
    # One of `auto`, `concise`, or `detailed`
    # 
    # # Deprecated
    @jsondata:Name {value: "generate_summary"}
    @deprecated
    "auto"|"concise"|"detailed"? generateSummary?;
};

# A double click action
public type DoubleClick record {
    # The x-coordinate where the double click occurred
    int x;
    # The y-coordinate where the double click occurred
    int y;
    # Specifies the event type. For a double click action, this property is 
    # always set to `double_click`
    "double_click" 'type = "double_click";
};

# Details about why the response is incomplete
public type ResponseIncompleteDetails record {
    # The reason why the response is incomplete
    "max_output_tokens"|"content_filter" reason?;
};

# A message input to the model with a role indicating instruction following
# hierarchy. Instructions given with the `developer` or `system` role take
# precedence over instructions given with the `user` role
public type InputMessage record {
    # The role of the message input. One of `user`, `system`, or `developer`
    "user"|"system"|"developer" role;
    # The type of the message input. Always set to `message`
    "message" 'type?;
    # A list of one or many input items to the model, containing different content 
    # types
    InputMessageContentList content;
    # The status of item. One of `in_progress`, `completed`, or
    # `incomplete`. Populated when items are returned via API
    "in_progress"|"completed"|"incomplete" status?;
};

public type UserListResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    User[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

public type ResponseAllOf3 record {
    # An array of content items generated by the model.
    # 
    # - The length and order of items in the `output` array is dependent
    #   on the model's response.
    # - Rather than accessing the first item in the `output` array and 
    #   assuming it's an `assistant` message with the content generated by
    #   the model, you might consider using the `output_text` property where
    #   supported in SDKs
    OutputItem[] output;
    # Whether to allow the model to run tool calls in parallel
    @jsondata:Name {value: "parallel_tool_calls"}
    boolean parallelToolCalls = true;
    # SDK-only convenience property that contains the aggregated text output 
    # from all `output_text` items in the `output` array, if any are present. 
    # Supported in the Python and JavaScript SDKs
    @jsondata:Name {value: "output_text"}
    string? outputText?;
    # Represents token usage details including input tokens, output tokens,
    # a breakdown of output tokens, and the total tokens used
    ResponseUsage usage?;
    # Unix timestamp (in seconds) of when this Response was created
    @jsondata:Name {value: "created_at"}
    decimal createdAt;
    # Unique identifier for this Response
    string id;
    # An error object returned when the model fails to generate a Response
    ResponseError? 'error;
    @jsondata:Name {value: "incomplete_details"}
    ResponseIncompleteDetails? incompleteDetails;
    # The object type of this resource - always set to `response`
    "response" 'object;
    # The status of the response generation. One of `completed`, `failed`, 
    # `in_progress`, or `incomplete`
    "completed"|"failed"|"in_progress"|"incomplete" status?;
};

# The details for events with this `type`
public type AuditLogUseradded record {
    # The payload used to add the user to the project
    AuditLogUseraddedData data?;
    # The user ID
    string id?;
};

public type CreateChatCompletionResponseChoices record {
    # The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    # `length` if the maximum number of tokens specified in the request was reached,
    # `content_filter` if content was omitted due to a flag from our content filters,
    # `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function
    @jsondata:Name {value: "finish_reason"}
    "stop"|"length"|"tool_calls"|"content_filter"|"function_call" finishReason;
    # The index of the choice in the list of choices
    int index;
    # A chat completion message generated by the model
    ChatCompletionResponseMessage message;
    # Log probability information for the choice
    CreateChatCompletionResponseLogprobs? logprobs;
};

# A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files
public type MessageContentTextAnnotationsFileCitationObject record {
    @jsondata:Name {value: "start_index"}
    int startIndex;
    @jsondata:Name {value: "file_citation"}
    MessageContentTextAnnotationsFileCitationObjectFileCitation fileCitation;
    @jsondata:Name {value: "end_index"}
    int endIndex;
    # The text in the message content that needs to be replaced
    string text;
    # Always `file_citation`
    "file_citation" 'type;
};

public type CreateChatCompletionRequestAllOf2 record {
    @jsondata:Name {value: "reasoning_effort"}
    ReasoningEffort? reasoningEffort?;
    # An integer between 0 and 20 specifying the number of most likely tokens to
    # return at each token position, each with an associated log probability.
    # `logprobs` must be set to `true` if this parameter is used
    @jsondata:Name {value: "top_logprobs"}
    int? topLogprobs?;
    # Modify the likelihood of specified tokens appearing in the completion.
    # 
    # Accepts a JSON object that maps tokens (specified by their token ID in the
    # tokenizer) to an associated bias value from -100 to 100. Mathematically,
    # the bias is added to the logits generated by the model prior to sampling.
    # The exact effect will vary per model, but values between -1 and 1 should
    # decrease or increase likelihood of selection; values like -100 or 100
    # should result in a ban or exclusive selection of the relevant token
    @jsondata:Name {value: "logit_bias"}
    record {|int...;|}? logitBias?;
    # This feature is in Beta.
    # If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
    # Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend
    int? seed?;
    # Deprecated in favor of `tools`.
    # 
    # A list of functions the model may generate JSON inputs for
    # 
    # # Deprecated
    @constraint:Array {maxLength: 128, minLength: 1}
    @deprecated
    ChatCompletionFunctions[] functions?;
    # Deprecated in favor of `tool_choice`.
    # 
    # Controls which (if any) function is called by the model.
    # 
    # `none` means the model will not call a function and instead generates a
    # message.
    # 
    # `auto` means the model can pick between generating a message or calling a
    # function.
    # 
    # Specifying a particular function via `{"name": "my_function"}` forces the
    # model to call that function.
    # 
    # `none` is the default when no functions are present. `auto` is the default
    # if functions are present
    # 
    # # Deprecated
    @jsondata:Name {value: "function_call"}
    @deprecated
    "none"|"auto"|ChatCompletionFunctionCallOption functionCall?;
    # Number between -2.0 and 2.0. Positive values penalize new tokens based on
    # whether they appear in the text so far, increasing the model's likelihood
    # to talk about new topics
    @jsondata:Name {value: "presence_penalty"}
    decimal? presencePenalty = 0;
    # A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported
    ChatCompletionTool[] tools?;
    @jsondata:Name {value: "web_search_options"}
    WebSearch webSearchOptions?;
    # Whether to return log probabilities of the output tokens or not. If true,
    # returns the log probabilities of each output token returned in the
    # `content` of `message`
    boolean? logprobs = false;
    # An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning)
    @jsondata:Name {value: "max_completion_tokens"}
    int? maxCompletionTokens?;
    # Output types that you would like the model to generate.
    # Most models are capable of generating text, which is the default:
    # 
    # `["text"]`
    # 
    # The `gpt-4o-audio-preview` model can also be used to 
    # [generate audio](/docs/guides/audio). To request that this model generate 
    # both text and audio responses, you can use:
    # 
    # `["text", "audio"]`
    ResponseModalities? modalities?;
    # Number between -2.0 and 2.0. Positive values penalize new tokens based on
    # their existing frequency in the text so far, decreasing the model's
    # likelihood to repeat the same line verbatim
    @jsondata:Name {value: "frequency_penalty"}
    decimal? frequencyPenalty = 0;
    # An object specifying the format that the model must output.
    # 
    # Setting to `{ "type": "json_schema", "json_schema": {...} }` enables
    # Structured Outputs which ensures the model will match your supplied JSON
    # schema. Learn more in the [Structured Outputs
    # guide](/docs/guides/structured-outputs).
    # 
    # Setting to `{ "type": "json_object" }` enables the older JSON mode, which
    # ensures the message the model generates is valid JSON. Using `json_schema`
    # is preferred for models that support it
    @jsondata:Name {value: "response_format"}
    ResponseFormatText|ResponseFormatJsonSchema|ResponseFormatJsonObject responseFormat?;
    # If set to true, the model response data will be streamed to the client
    # as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
    # See the [Streaming section below](/docs/api-reference/chat/streaming)
    # for more information, along with the [streaming responses](/docs/guides/streaming-responses)
    # guide for more information on how to handle the streaming events
    boolean? 'stream = false;
    @jsondata:Name {value: "tool_choice"}
    ChatCompletionToolChoiceOption toolChoice?;
    ModelIdsShared model;
    # Parameters for audio output. Required when audio output is requested with
    # `modalities: ["audio"]`. [Learn more](/docs/guides/audio)
    CreateChatCompletionRequestAudio? audio?;
    # The maximum number of [tokens](/tokenizer) that can be generated in the
    # chat completion. This value can be used to control
    # [costs](https://openai.com/api/pricing/) for text generated via API.
    # 
    # This value is now deprecated in favor of `max_completion_tokens`, and is
    # not compatible with [o-series models](/docs/guides/reasoning)
    # 
    # # Deprecated
    @jsondata:Name {value: "max_tokens"}
    @deprecated
    int? maxTokens?;
    # Whether or not to store the output of this chat completion request for 
    # use in our [model distillation](/docs/guides/distillation) or
    # [evals](/docs/guides/evals) products
    boolean? store = false;
    # How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs
    int? n = 1;
    # Not supported with latest reasoning models `o3` and `o4-mini`.
    # 
    # Up to 4 sequences where the API will stop generating further tokens. The
    # returned text will not contain the stop sequence
    StopConfiguration? stop?;
    @jsondata:Name {value: "parallel_tool_calls"}
    ParallelToolCalls parallelToolCalls?;
    # Configuration for a [Predicted Output](/docs/guides/predicted-outputs),
    # which can greatly improve response times when large parts of the model
    # response are known ahead of time. This is most common when you are
    # regenerating a file with only minor changes to most of the content
    PredictionContent? prediction?;
    # A list of messages comprising the conversation so far. Depending on the
    # [model](/docs/models) you use, different message types (modalities) are
    # supported, like [text](/docs/guides/text-generation),
    # [images](/docs/guides/vision), and [audio](/docs/guides/audio)
    @constraint:Array {minLength: 1}
    ChatCompletionRequestMessage[] messages;
    @jsondata:Name {value: "stream_options"}
    ChatCompletionStreamOptions? streamOptions?;
};

public type CreateEvalCompletionsRunDataSourceSamplingParams record {
    # An alternative to temperature for nucleus sampling; 1.0 includes all tokens
    @jsondata:Name {value: "top_p"}
    decimal topP = 1;
    # The maximum number of tokens in the generated output
    @jsondata:Name {value: "max_completion_tokens"}
    int maxCompletionTokens?;
    # A seed value to initialize the randomness, during sampling
    int seed = 42;
    # A higher temperature increases randomness in the outputs
    decimal temperature = 1;
};

# Realtime session object configuration
public type RealtimeSessionCreateRequest record {
    VoiceIdsShared voice?;
    # The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. "be extremely succinct", "act friendly", "here are examples of good  responses") and on audio behavior (e.g. "talk quickly", "inject emotion  into your voice", "laugh frequently"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the desired behavior.
    # 
    # Note that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session
    string instructions?;
    # The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
    # For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, 
    # single channel (mono), and little-endian byte order
    @jsondata:Name {value: "input_audio_format"}
    "pcm16"|"g711_ulaw"|"g711_alaw" inputAudioFormat = "pcm16";
    @jsondata:Name {value: "input_audio_noise_reduction"}
    RealtimeSessionInputAudioNoiseReduction inputAudioNoiseReduction?;
    @jsondata:Name {value: "input_audio_transcription"}
    RealtimeSessionInputAudioTranscription inputAudioTranscription?;
    @jsondata:Name {value: "turn_detection"}
    RealtimeSessionTurnDetection turnDetection?;
    # Tools (functions) available to the model
    RealtimeResponseCreateParamsTools[] tools?;
    # The set of modalities the model can respond with. To disable audio,
    # set this to ["text"]
    ("text"|"audio")[] modalities?;
    # Maximum number of output tokens for a single assistant response,
    # inclusive of tool calls. Provide an integer between 1 and 4096 to
    # limit output tokens, or `inf` for the maximum available tokens for a
    # given model. Defaults to `inf`
    @jsondata:Name {value: "max_response_output_tokens"}
    int|"inf" maxResponseOutputTokens?;
    # The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.
    # For `pcm16`, output audio is sampled at a rate of 24kHz
    @jsondata:Name {value: "output_audio_format"}
    "pcm16"|"g711_ulaw"|"g711_alaw" outputAudioFormat = "pcm16";
    # Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance
    decimal temperature = 0.8;
    # How the model chooses tools. Options are `auto`, `none`, `required`, or 
    # specify a function
    @jsondata:Name {value: "tool_choice"}
    string toolChoice = "auto";
    # The Realtime model used for this session
    "gpt-4o-realtime-preview"|"gpt-4o-realtime-preview-2024-10-01"|"gpt-4o-realtime-preview-2024-12-17"|"gpt-4o-mini-realtime-preview"|"gpt-4o-mini-realtime-preview-2024-12-17" model?;
};

public type ModifyAssistantRequest record {|
    @jsondata:Name {value: "reasoning_effort"}
    ReasoningEffort? reasoningEffort?;
    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # 
    # We generally recommend altering this or temperature but not both
    @jsondata:Name {value: "top_p"}
    decimal? topP = 1;
    # The system instructions that the assistant uses. The maximum length is 256,000 characters
    string? instructions?;
    @jsondata:Name {value: "tool_resources"}
    ModifyAssistantRequestToolResources? toolResources?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    @jsondata:Name {value: "response_format"}
    AssistantsApiResponseFormatOption responseFormat?;
    # The name of the assistant. The maximum length is 256 characters
    string? name?;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic
    decimal? temperature = 1;
    # The description of the assistant. The maximum length is 512 characters
    string? description?;
    # ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them
    string|AssistantSupportedModels model?;
    # A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`
    @constraint:Array {maxLength: 128}
    AssistantObjectTools[] tools = [];
|};

public type MessageContentTextObjectTextAnnotations MessageContentTextAnnotationsFileCitationObject|MessageContentTextAnnotationsFilePathObject;

public type ChatCompletionRequestUserMessageContentPart ChatCompletionRequestMessageContentPartText|ChatCompletionRequestMessageContentPartImage|ChatCompletionRequestMessageContentPartAudio|ChatCompletionRequestMessageContentPartFile;

public type ProjectApiKeyListResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    ProjectApiKey[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

# Represents the Queries record for the operation: usage-audio-speeches
public type UsageAudioSpeechesQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # Return only usage for these models
    string[] models?;
    # Return only usage for these users
    @http:Query {name: "user_ids"}
    string[] userIds?;
    # Return only usage for these API keys
    @http:Query {name: "api_key_ids"}
    string[] apiKeyIds?;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them
    @http:Query {name: "group_by"}
    ("project_id"|"user_id"|"api_key_id"|"model")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

# Represents the Queries record for the operation: usage-embeddings
public type UsageEmbeddingsQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # Return only usage for these models
    string[] models?;
    # Return only usage for these users
    @http:Query {name: "user_ids"}
    string[] userIds?;
    # Return only usage for these API keys
    @http:Query {name: "api_key_ids"}
    string[] apiKeyIds?;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them
    @http:Query {name: "group_by"}
    ("project_id"|"user_id"|"api_key_id"|"model")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

public type FineTuningIntegration record {
    # The settings for your integration with Weights and Biases. This payload specifies the project that
    # metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
    # to your run, and set a default entity (team, username, etc) to be associated with your run
    CreateFineTuningJobRequestWandb wandb;
    # The type of the integration being enabled for the fine-tuning job
    "wandb" 'type;
};

public type SubmitToolOutputsRunRequest record {|
    # If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message
    boolean? 'stream?;
    # A list of tools for which the outputs are being submitted
    @jsondata:Name {value: "tool_outputs"}
    SubmitToolOutputsRunRequestToolOutputs[] toolOutputs;
|};

public type Tool FileSearchTool|FunctionTool|WebSearchPreviewTool|ComputerUsePreviewTool;

public type CreateEvalRunRequest record {
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The name of the run
    string name?;
    # Details about the run's data source
    @jsondata:Name {value: "data_source"}
    CreateEvalJsonlRunDataSource|CreateEvalCompletionsRunDataSource|CreateEvalResponsesRunDataSource dataSource;
};

# A collection of keypresses the model would like to perform
public type KeyPress record {
    # The combination of keys the model is requesting to be pressed. This is an
    # array of strings, each representing a key
    string[] keys;
    # Specifies the event type. For a keypress action, this property is 
    # always set to `keypress`
    "keypress" 'type = "keypress";
};

# A batch of files attached to a vector store
public type VectorStoreFileBatchObject record {
    @jsondata:Name {value: "file_counts"}
    VectorStoreFileBatchObjectFileCounts fileCounts;
    # The Unix timestamp (in seconds) for when the vector store files batch was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `vector_store.file_batch`
    "vector_store.files_batch" 'object;
    # The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to
    @jsondata:Name {value: "vector_store_id"}
    string vectorStoreId;
    # The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`
    "in_progress"|"completed"|"cancelled"|"failed" status;
};

# The details for events with this `type`
public type AuditLogServiceAccountupdated record {
    @jsondata:Name {value: "changes_requested"}
    AuditLogServiceAccountupdatedChangesRequested changesRequested?;
    # The service account ID
    string id?;
};

# A scroll action
public type Scroll record {
    # The vertical scroll distance
    @jsondata:Name {value: "scroll_y"}
    int scrollY;
    # The horizontal scroll distance
    @jsondata:Name {value: "scroll_x"}
    int scrollX;
    # The x-coordinate where the scroll occurred
    int x;
    # The y-coordinate where the scroll occurred
    int y;
    # Specifies the event type. For a scroll action, this property is 
    # always set to `scroll`
    "scroll" 'type = "scroll";
};

public type ModifyRunRequest record {|
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
|};

# Represents the Queries record for the operation: list-project-api-keys
public type ListProjectApiKeysQueries record {
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

public type CreateTranslationResponseVerboseJson record {
    # The duration of the input audio
    decimal duration;
    # The language of the output translation (always `english`)
    string language;
    # The translated text
    string text;
    # Segments of the translated text and their corresponding details
    TranscriptionSegment[] segments?;
};

# The details for events with this `type`
public type AuditLogCertificatesactivated record {
    AuditLogCertificatesactivatedCertificates[] certificates?;
};

public type CreateCompletionResponseLogprobs record {
    @jsondata:Name {value: "top_logprobs"}
    record {||}[] topLogprobs?;
    @jsondata:Name {value: "token_logprobs"}
    decimal[] tokenLogprobs?;
    string[] tokens?;
    @jsondata:Name {value: "text_offset"}
    int[] textOffset?;
};

# The payload used to add the user to the project
public type AuditLogUseraddedData record {
    # The role of the user. Is either `owner` or `member`
    string role?;
};

public type ProjectServiceAccountListResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    ProjectServiceAccount[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

# Approximate location parameters for the search
public type WebSearchLocation record {
    # The two-letter 
    # [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,
    # e.g. `US`
    string country?;
    # Free text input for the city of the user, e.g. `San Francisco`
    string city?;
    # The [IANA timezone](https://timeapi.io/documentation/iana-timezones) 
    # of the user, e.g. `America/Los_Angeles`
    string timezone?;
    # Free text input for the region of the user, e.g. `California`
    string region?;
};

public type DeleteFileResponse record {
    boolean deleted;
    string id;
    "file" 'object;
};

public type ModelIdsSharedModelIdsSharedAnyOf12 "gpt-4.1"|"gpt-4.1-mini"|"gpt-4.1-nano"|"gpt-4.1-2025-04-14"|"gpt-4.1-mini-2025-04-14"|"gpt-4.1-nano-2025-04-14"|"o4-mini"|"o4-mini-2025-04-16"|"o3"|"o3-2025-04-16"|"o3-mini"|"o3-mini-2025-01-31"|"o1"|"o1-2024-12-17"|"o1-preview"|"o1-preview-2024-09-12"|"o1-mini"|"o1-mini-2024-09-12"|"gpt-4o"|"gpt-4o-2024-11-20"|"gpt-4o-2024-08-06"|"gpt-4o-2024-05-13"|"gpt-4o-audio-preview"|"gpt-4o-audio-preview-2024-10-01"|"gpt-4o-audio-preview-2024-12-17"|"gpt-4o-mini-audio-preview"|"gpt-4o-mini-audio-preview-2024-12-17"|"gpt-4o-search-preview"|"gpt-4o-mini-search-preview"|"gpt-4o-search-preview-2025-03-11"|"gpt-4o-mini-search-preview-2025-03-11"|"chatgpt-4o-latest"|"gpt-4o-mini"|"gpt-4o-mini-2024-07-18"|"gpt-4-turbo"|"gpt-4-turbo-2024-04-09"|"gpt-4-0125-preview"|"gpt-4-turbo-preview"|"gpt-4-1106-preview"|"gpt-4-vision-preview"|"gpt-4"|"gpt-4-0314"|"gpt-4-0613"|"gpt-4-32k"|"gpt-4-32k-0314"|"gpt-4-32k-0613"|"gpt-3.5-turbo"|"gpt-3.5-turbo-16k"|"gpt-3.5-turbo-0301"|"gpt-3.5-turbo-0613"|"gpt-3.5-turbo-1106"|"gpt-3.5-turbo-0125"|"gpt-3.5-turbo-16k-0613";

# The details for events with this `type`
public type AuditLogOrganizationupdated record {
    @jsondata:Name {value: "changes_requested"}
    AuditLogOrganizationupdatedChangesRequested changesRequested?;
    # The organization ID
    string id?;
};

# A wait action
public type Wait record {
    # Specifies the event type. For a wait action, this property is 
    # always set to `wait`
    "wait" 'type = "wait";
};

public type CreateMessageRequest record {|
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The role of the entity that is creating the message. Allowed values include:
    # - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
    # - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation
    "user"|"assistant" role;
    # A list of files attached to the message, and the tools they should be added to
    CreateMessageRequestAttachments[]? attachments?;
    string|(MessageContentImageFileObject|MessageContentImageUrlObject|MessageRequestContentTextObject)[] content;
|};

public type CreateAssistantRequestToolResourcesFileSearch anydata;

public type ChatCompletionDeleted record {
    # Whether the chat completion was deleted
    boolean deleted;
    # The ID of the chat completion that was deleted
    string id;
    # The type of object being deleted
    "chat.completion.deleted" 'object;
};

# The details for events with this `type`
public type AuditLogRateLimitupdated record {
    @jsondata:Name {value: "changes_requested"}
    AuditLogRateLimitupdatedChangesRequested changesRequested?;
    # The rate limit ID
    string id?;
};

# Represents a step in execution of a run
public type RunStepObject record {
    # The Unix timestamp (in seconds) for when the run step was cancelled
    @jsondata:Name {value: "cancelled_at"}
    int? cancelledAt;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The ID of the [assistant](/docs/api-reference/assistants) associated with the run step
    @jsondata:Name {value: "assistant_id"}
    string assistantId;
    # The ID of the [run](/docs/api-reference/runs) that this run step is a part of
    @jsondata:Name {value: "run_id"}
    string runId;
    # Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`
    RunStepCompletionUsage? usage;
    # The Unix timestamp (in seconds) for when the run step was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired
    @jsondata:Name {value: "expired_at"}
    int? expiredAt;
    # The type of run step, which can be either `message_creation` or `tool_calls`
    "message_creation"|"tool_calls" 'type;
    # The details of the run step
    @jsondata:Name {value: "step_details"}
    RunStepDetailsMessageCreationObject|RunStepDetailsToolCallsObject stepDetails;
    # The Unix timestamp (in seconds) for when the run step completed
    @jsondata:Name {value: "completed_at"}
    int? completedAt;
    # The ID of the [thread](/docs/api-reference/threads) that was run
    @jsondata:Name {value: "thread_id"}
    string threadId;
    # The identifier of the run step, which can be referenced in API endpoints
    string id;
    @jsondata:Name {value: "last_error"}
    RunStepObjectLastError? lastError;
    # The Unix timestamp (in seconds) for when the run step failed
    @jsondata:Name {value: "failed_at"}
    int? failedAt;
    # The object type, which is always `thread.run.step`
    "thread.run.step" 'object;
    # The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`
    "in_progress"|"cancelled"|"failed"|"completed"|"expired" status;
};

# Specifies a tool the model should use. Use to force the model to call a specific function
public type ChatCompletionNamedToolChoice record {
    AssistantsNamedToolChoiceFunction 'function;
    # The type of the tool. Currently, only `function` is supported
    "function" 'type;
};

public type MessageObjectContent MessageContentImageFileObject|MessageContentImageUrlObject|MessageContentTextObject|MessageContentRefusalObject;

public type InlineResponse200 CreateTranscriptionResponseJson|CreateTranscriptionResponseVerboseJson;

# Ephemeral key returned by the API. Only present when the session is
# created on the server via REST API
public type RealtimeTranscriptionSessionCreateResponseClientSecret record {
    # Timestamp for when the token expires. Currently, all tokens expire
    # after one minute
    @jsondata:Name {value: "expires_at"}
    int expiresAt;
    # Ephemeral key usable in client environments to authenticate connections
    # to the Realtime API. Use this in client-side environments rather than
    # a standard API token, which should only be used server-side
    string value;
};

# The definition of the function that was called
public type RunStepDetailsToolCallsFunctionObjectFunction record {
    # The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet
    string? output;
    # The name of the function
    string name;
    # The arguments passed to the function
    string arguments;
};

# The aggregated completions usage details of the specific time bucket
public type UsageCompletionsResult record {
    # The count of requests made to the model
    @jsondata:Name {value: "num_model_requests"}
    int numModelRequests;
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    # When `group_by=user_id`, this field provides the user ID of the grouped usage result
    @jsondata:Name {value: "user_id"}
    string? userId?;
    # The aggregated number of audio output tokens used
    @jsondata:Name {value: "output_audio_tokens"}
    int outputAudioTokens?;
    # When `group_by=batch`, this field tells whether the grouped usage result is batch or not
    boolean? batch?;
    # The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens
    @jsondata:Name {value: "output_tokens"}
    int outputTokens;
    # When `group_by=model`, this field provides the model name of the grouped usage result
    string? model?;
    # The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens
    @jsondata:Name {value: "input_cached_tokens"}
    int inputCachedTokens?;
    # The aggregated number of audio input tokens used, including cached tokens
    @jsondata:Name {value: "input_audio_tokens"}
    int inputAudioTokens?;
    # The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens
    @jsondata:Name {value: "input_tokens"}
    int inputTokens;
    # When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result
    @jsondata:Name {value: "api_key_id"}
    string? apiKeyId?;
    "organization.usage.completions.result" 'object;
};

# A tool call to run a function. See the 
# [function calling guide](/docs/guides/function-calling) for more information
public type FunctionToolCall record {
    # The name of the function to run
    string name;
    # A JSON string of the arguments to pass to the function
    string arguments;
    # The unique ID of the function tool call
    string id?;
    # The type of the function tool call. Always `function_call`
    "function_call" 'type;
    # The unique ID of the function tool call generated by the model
    @jsondata:Name {value: "call_id"}
    string callId;
    # The status of the item. One of `in_progress`, `completed`, or
    # `incomplete`. Populated when items are returned via API
    "in_progress"|"completed"|"incomplete" status?;
};

# Represents the Queries record for the operation: getRunStep
public type GetRunStepQueries record {
    # A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
    # 
    # See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information
    @http:Query {name: "include[]"}
    ("step_details.tool_calls[*].file_search.results[*].content")[] include?;
};

# JSON Schema response format. Used to generate structured JSON responses.
# Learn more about [Structured Outputs](/docs/guides/structured-outputs)
public type ResponseFormatJsonSchema record {
    @jsondata:Name {value: "json_schema"}
    JSONSchema jsonSchema;
    # The type of response format being defined. Always `json_schema`
    "json_schema" 'type;
};

# A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs
public type CreateAssistantRequestToolResources record {
    @jsondata:Name {value: "code_interpreter"}
    CreateAssistantRequestToolResourcesCodeInterpreter codeInterpreter?;
    @jsondata:Name {value: "file_search"}
    CreateAssistantRequestToolResourcesFileSearch fileSearch?;
};

# Configuration for input audio noise reduction. This can be set to `null` to turn off.
# Noise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.
# Filtering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio
public type RealtimeSessionInputAudioNoiseReduction record {
    # Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones
    "near_field"|"far_field" 'type?;
};

# The payload used to create the project
public type AuditLogProjectcreatedData record {
    # The project name
    string name?;
    # The title of the project as seen on the dashboard
    string title?;
};

# The payload used to update the project
public type AuditLogProjectupdatedChangesRequested record {
    # The title of the project as seen on the dashboard
    string title?;
};

public type ProjectRateLimitListResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    ProjectRateLimit[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

# The output of a function tool call
public type FunctionCallOutputItemParam record {
    # A JSON string of the output of the function tool call
    @constraint:String {maxLength: 10485760}
    string output;
    anydata id?;
    # The type of the function tool call output. Always `function_call_output`
    "function_call_output" 'type = "function_call_output";
    # The unique ID of the function tool call generated by the model
    @jsondata:Name {value: "call_id"}
    string callId;
    anydata status?;
};

# The upload Part represents a chunk of bytes we can add to an Upload object
public type UploadPart record {
    # The ID of the Upload object that this Part was added to
    @jsondata:Name {value: "upload_id"}
    string uploadId;
    # The Unix timestamp (in seconds) for when the Part was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The upload Part unique identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `upload.part`
    "upload.part" 'object;
};

public type ToggleCertificatesRequest record {
    @jsondata:Name {value: "certificate_ids"}
    string[] certificateIds;
};

# Breakdown of tokens used in the prompt
public type CompletionUsagePromptTokensDetails record {
    # Audio input tokens present in the prompt
    @jsondata:Name {value: "audio_tokens"}
    int audioTokens = 0;
    # Cached tokens present in the prompt
    @jsondata:Name {value: "cached_tokens"}
    int cachedTokens = 0;
};

# Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model
# 
# # Deprecated
@deprecated
public type ChatCompletionRequestAssistantMessageFunctionCall record {
    # The name of the function to call
    string name;
    # The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function
    string arguments;
};

public type ChatCompletionRequestMessageContentPartImageImageUrl record {
    # Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding)
    "auto"|"low"|"high" detail = "auto";
    # Either a URL of the image or the base64 encoded image data
    string url;
};

# The details for events with this `type`
public type AuditLogUserdeleted record {
    # The user ID
    string id?;
};

# A chat completion message generated by the model
public type ChatCompletionResponseMessage record {
    # The role of the author of this message
    "assistant" role;
    @jsondata:Name {value: "function_call"}
    ChatCompletionResponseMessageFunctionCall functionCall?;
    # The refusal message generated by the model
    string? refusal;
    # Annotations for the message, when applicable, as when using the
    # [web search tool](/docs/guides/tools-web-search?api-mode=chat)
    ChatCompletionResponseMessageAnnotations[] annotations?;
    @jsondata:Name {value: "tool_calls"}
    ChatCompletionMessageToolCalls toolCalls?;
    # If the audio output modality is requested, this object contains data
    # about the audio response from the model. [Learn more](/docs/guides/audio)
    ChatCompletionResponseMessageAudio? audio?;
    # The contents of the message
    string? content;
};

public type UsageResponse record {
    @jsondata:Name {value: "next_page"}
    string nextPage;
    UsageTimeBucket[] data;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "page" 'object;
};

# Counters summarizing the outcomes of the evaluation run
public type EvalRunResultCounts record {
    # Total number of executed output items
    int total;
    # Number of output items that failed to pass the evaluation
    int failed;
    # Number of output items that passed the evaluation
    int passed;
    # Number of output items that resulted in an error
    int errored;
};

# The actor who performed the audit logged action
public type AuditLogActor record {
    @jsondata:Name {value: "api_key"}
    AuditLogActorApiKey apiKey?;
    # The session in which the audit logged action was performed
    AuditLogActorSession session?;
    # The type of actor. Is either `session` or `api_key`
    "session"|"api_key" 'type?;
};

# Text output from the Code Interpreter tool call as part of a run step
public type RunStepDetailsToolCallsCodeOutputLogsObject record {
    # Always `logs`
    "logs" 'type;
    # The text output from the Code Interpreter tool call
    string logs;
};

public type StaticChunkingStrategyResponseParam record {|
    StaticChunkingStrategy static;
    # Always `static`
    "static" 'type;
|};

# An object representing an error response from the Eval API
public type EvalApiError record {
    # The error code
    string code;
    # The error message
    string message;
};

public type ProjectServiceAccountDeleteResponse record {
    boolean deleted;
    string id;
    "organization.project.service_account.deleted" 'object;
};

# The details for events with this `type`
public type AuditLogCheckpointPermissiondeleted record {
    # The ID of the checkpoint permission
    string id?;
};

# Represents an individual `invite` to the organization
public type Invite record {
    # `owner` or `reader`
    "owner"|"reader" role;
    # The Unix timestamp (in seconds) of when the invite expires
    @jsondata:Name {value: "expires_at"}
    int expiresAt;
    # The projects that were granted membership upon acceptance of the invite
    InviteProjects[] projects?;
    # The Unix timestamp (in seconds) of when the invite was sent
    @jsondata:Name {value: "invited_at"}
    int invitedAt;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The Unix timestamp (in seconds) of when the invite was accepted
    @jsondata:Name {value: "accepted_at"}
    int acceptedAt?;
    # The email address of the individual to whom the invite was sent
    string email;
    # The object type, which is always `organization.invite`
    "organization.invite" 'object;
    # `accepted`,`expired`, or `pending`
    "accepted"|"expired"|"pending" status;
};

public type MessageContentImageFileObjectImageFile record {
    # The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content
    @jsondata:Name {value: "file_id"}
    string fileId;
    # Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`
    "auto"|"low"|"high" detail = "auto";
};

# The request counts for different statuses within the batch
public type BatchRequestCounts record {
    # Total number of requests in the batch
    int total;
    # Number of requests that have been completed successfully
    int completed;
    # Number of requests that have failed
    int failed;
};

# High level guidance for the amount of context window space to use for the 
# search. One of `low`, `medium`, or `high`. `medium` is the default
public type WebSearchContextSize "low"|"medium"|"high";

# Represents the Queries record for the operation: list-invites
public type ListInvitesQueries record {
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

public type VoiceIdsSharedVoiceIdsSharedAnyOf12 "alloy"|"ash"|"ballad"|"coral"|"echo"|"fable"|"onyx"|"nova"|"sage"|"shimmer"|"verse";

public type ProjectApiKeyOwner record {
    @jsondata:Name {value: "service_account"}
    ProjectServiceAccount serviceAccount?;
    # `user` or `service_account`
    "user"|"service_account" 'type?;
    # Represents an individual user in a project
    ProjectUser user?;
};

# Represents the Queries record for the operation: usage-vector-stores
public type UsageVectorStoresQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`
    @http:Query {name: "group_by"}
    ("project_id")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

# `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user
public type AssistantsApiToolChoiceOptionOneOf1 "none"|"auto"|"required";

public type ListRunsResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    RunObject[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    string 'object;
};

public type RunStepDetailsToolCallsFunctionObject record {
    # The definition of the function that was called
    RunStepDetailsToolCallsFunctionObjectFunction 'function;
    # The ID of the tool call object
    string id;
    # The type of tool call. This is always going to be `function` for this type of tool call
    "function" 'type;
};

# A TextSimilarityGrader object which grades text based on similarity metrics
public type EvalTextSimilarityGrader record {
    # The text being graded against
    string reference;
    # The text being graded
    string input;
    # A float score where a value greater than or equal indicates a passing grade
    @jsondata:Name {value: "pass_threshold"}
    decimal passThreshold;
    # The name of the grader
    string name?;
    # The evaluation metric to use. One of `fuzzy_match`, `bleu`, `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`, or `rouge_l`
    @jsondata:Name {value: "evaluation_metric"}
    "fuzzy_match"|"bleu"|"gleu"|"meteor"|"rouge_1"|"rouge_2"|"rouge_3"|"rouge_4"|"rouge_5"|"rouge_l" evaluationMetric;
    # The type of grader
    "text_similarity" 'type = "text_similarity";
};

# A tool that searches for relevant content from uploaded files. Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search)
public type FileSearchTool record {
    # The IDs of the vector stores to search
    @jsondata:Name {value: "vector_store_ids"}
    string[] vectorStoreIds;
    # The maximum number of results to return. This number should be between 1 and 50 inclusive
    @jsondata:Name {value: "max_num_results"}
    int maxNumResults?;
    @jsondata:Name {value: "ranking_options"}
    RankingOptions rankingOptions?;
    anydata filters?;
    # The type of the file search tool. Always `file_search`
    "file_search" 'type = "file_search";
};

# An object representing a list of evals
public type EvalList record {
    # The identifier of the first eval in the data array
    @jsondata:Name {value: "first_id"}
    string firstId;
    # An array of eval objects
    Eval[] data;
    # The identifier of the last eval in the data array
    @jsondata:Name {value: "last_id"}
    string lastId;
    # Indicates whether there are more evals available
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    # The type of this object. It is always set to "list"
    "list" 'object = "list";
};

public type CreateRunRequest record {|
    @jsondata:Name {value: "reasoning_effort"}
    ReasoningEffort? reasoningEffort?;
    # Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis
    string? instructions?;
    # Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions
    @jsondata:Name {value: "additional_instructions"}
    string? additionalInstructions?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run
    @jsondata:Name {value: "assistant_id"}
    string assistantId;
    # Adds additional messages to the thread before creating the run
    @jsondata:Name {value: "additional_messages"}
    CreateMessageRequest[]? additionalMessages?;
    # Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis
    AssistantObjectTools[]? tools?;
    @jsondata:Name {value: "truncation_strategy"}
    TruncationObject truncationStrategy?;
    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # 
    # We generally recommend altering this or temperature but not both
    @jsondata:Name {value: "top_p"}
    decimal? topP = 1;
    # The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info
    @jsondata:Name {value: "max_completion_tokens"}
    int? maxCompletionTokens?;
    @jsondata:Name {value: "response_format"}
    AssistantsApiResponseFormatOption responseFormat?;
    @jsondata:Name {value: "parallel_tool_calls"}
    ParallelToolCalls parallelToolCalls?;
    # If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message
    boolean? 'stream?;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic
    decimal? temperature = 1;
    @jsondata:Name {value: "tool_choice"}
    AssistantsApiToolChoiceOption toolChoice?;
    # The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used
    string|AssistantSupportedModels? model?;
    # The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info
    @jsondata:Name {value: "max_prompt_tokens"}
    int? maxPromptTokens?;
|};

public type InputItemsArray int[];

# Controls which (if any) tool is called by the model.
# `none` means the model will not call any tool and instead generates a message.
# `auto` means the model can pick between generating a message or calling one or more tools.
# `required` means the model must call one or more tools.
# Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
# 
# `none` is the default when no tools are present. `auto` is the default if tools are present
public type ChatCompletionToolChoiceOption ChatCompletionToolChoiceOptionOneOf1|ChatCompletionNamedToolChoice;

public type InviteDeleteResponse record {
    boolean deleted;
    string id;
    # The object type, which is always `organization.invite.deleted`
    "organization.invite.deleted" 'object;
};

# Details on the action required to continue the run. Will be `null` if no action is required
public type RunObjectRequiredAction record {
    @jsondata:Name {value: "submit_tool_outputs"}
    RunObjectRequiredActionSubmitToolOutputs submitToolOutputs;
    # For now, this is always `submit_tool_outputs`
    "submit_tool_outputs" 'type;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.
# 
# See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information
public type FileSearchRankingOptions record {
    # The score threshold for the file search. All values must be a floating point number between 0 and 1
    @jsondata:Name {value: "score_threshold"}
    decimal scoreThreshold;
    # The ranker to use for the file search. If not specified will use the `auto` ranker
    FileSearchRanker ranker?;
};

public type AuditLogOrganizationupdatedChangesRequestedSettings record {
    # Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`
    @jsondata:Name {value: "threads_ui_visibility"}
    string threadsUiVisibility?;
    # Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`
    @jsondata:Name {value: "usage_dashboard_visibility"}
    string usageDashboardVisibility?;
};

# The ranking options for the file search
public type RunStepDetailsToolCallsFileSearchRankingOptionsObject record {
    # The score threshold for the file search. All values must be a floating point number between 0 and 1
    @jsondata:Name {value: "score_threshold"}
    decimal scoreThreshold;
    # The ranker to use for the file search. If not specified will use the `auto` ranker
    FileSearchRanker ranker;
};

# Ranking options for search
public type VectorStoreSearchRequestRankingOptions record {|
    @jsondata:Name {value: "score_threshold"}
    decimal scoreThreshold = 0;
    "auto"|"default-2024-11-15" ranker = "auto";
|};

# Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service
public type RealtimeSessionInputAudioTranscription record {
    # The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`
    string model?;
    # The language of the input audio. Supplying the input language in
    # [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
    # will improve accuracy and latency
    string language?;
    # An optional text to guide the model's style or continue a previous audio
    # segment.
    # For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).
    # For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology"
    string prompt?;
};

# The tool calls generated by the model, such as function calls
public type ChatCompletionMessageToolCalls ChatCompletionMessageToolCall[];

public type ChatCompletionTokenLogprobTopLogprobs record {
    # The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely
    decimal logprob;
    # A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token
    int[]? bytes;
    # The token
    string token;
};

# Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use
public type ParallelToolCalls boolean;

# Represents an individual project
public type Project record {
    # The Unix timestamp (in seconds) of when the project was archived or `null`
    @jsondata:Name {value: "archived_at"}
    int? archivedAt?;
    # The name of the project. This appears in reporting
    string name;
    # The Unix timestamp (in seconds) of when the project was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `organization.project`
    "organization.project" 'object;
    # `active` or `archived`
    "active"|"archived" status;
};

public type TranscriptionWord record {
    # Start time of the word in seconds
    float 'start;
    # End time of the word in seconds
    float end;
    # The text content of the word
    string word;
};

# Configuration for input audio transcription, defaults to off and can be 
# set to `null` to turn off once on. Input audio transcription is not native 
# to the model, since the model consumes audio directly. Transcription runs 
# asynchronously through Whisper and should be treated as rough guidance 
# rather than the representation understood by the model
public type RealtimeSessionCreateResponseInputAudioTranscription record {
    # The model to use for transcription, `whisper-1` is the only currently 
    # supported model
    string model?;
};

# A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs
public type AssistantObjectToolResources record {
    @jsondata:Name {value: "code_interpreter"}
    AssistantObjectToolResourcesCodeInterpreter codeInterpreter?;
    @jsondata:Name {value: "file_search"}
    AssistantObjectToolResourcesFileSearch fileSearch?;
};

public type EvalTestingCriteria EvalLabelModelGrader|EvalStringCheckGrader|EvalTextSimilarityGrader|EvalPythonGrader|EvalScoreModelGrader;

# Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service
public type RealtimeTranscriptionSessionCreateRequestInputAudioTranscription record {
    # The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`
    "gpt-4o-transcribe"|"gpt-4o-mini-transcribe"|"whisper-1" model?;
    # The language of the input audio. Supplying the input language in
    # [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format
    # will improve accuracy and latency
    string language?;
    # An optional text to guide the model's style or continue a previous audio
    # segment.
    # For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).
    # For `gpt-4o-transcribe` models, the prompt is a free text string, for example "expect words related to technology"
    string prompt?;
};

public type CreateVectorStoreFileRequest record {|
    @jsondata:Name {value: "chunking_strategy"}
    ChunkingStrategyRequestParam chunkingStrategy?;
    # A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files
    @jsondata:Name {value: "file_id"}
    string fileId;
    # Set of 16 key-value pairs that can be attached to an object. This can be 
    # useful for storing additional information about the object in a structured 
    # format, and querying for objects via API or the dashboard. Keys are strings 
    # with a maximum length of 64 characters. Values are strings with a maximum 
    # length of 512 characters, booleans, or numbers
    VectorStoreFileAttributes? attributes?;
|};

public type ProjectUserCreateRequest record {
    # `owner` or `member`
    "owner"|"member" role;
    # The ID of the user
    @jsondata:Name {value: "user_id"}
    string userId;
};

# A new Realtime session configuration, with an ephermeral key. Default TTL
# for keys is one minute
public type RealtimeSessionCreateResponse record {
    VoiceIdsShared voice?;
    # The default system instructions (i.e. system message) prepended to model 
    # calls. This field allows the client to guide the model on desired 
    # responses. The model can be instructed on response content and format, 
    # (e.g. "be extremely succinct", "act friendly", "here are examples of good 
    # responses") and on audio behavior (e.g. "talk quickly", "inject emotion 
    # into your voice", "laugh frequently"). The instructions are not guaranteed 
    # to be followed by the model, but they provide guidance to the model on the 
    # desired behavior.
    # 
    # Note that the server sets default instructions which will be used if this 
    # field is not set and are visible in the `session.created` event at the 
    # start of the session
    string instructions?;
    # The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`
    @jsondata:Name {value: "input_audio_format"}
    string inputAudioFormat?;
    # The set of modalities the model can respond with. To disable audio,
    # set this to ["text"]
    ("text"|"audio")[] modalities?;
    # Maximum number of output tokens for a single assistant response,
    # inclusive of tool calls. Provide an integer between 1 and 4096 to
    # limit output tokens, or `inf` for the maximum available tokens for a
    # given model. Defaults to `inf`
    @jsondata:Name {value: "max_response_output_tokens"}
    int|"inf" maxResponseOutputTokens?;
    # The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`
    @jsondata:Name {value: "output_audio_format"}
    string outputAudioFormat?;
    @jsondata:Name {value: "input_audio_transcription"}
    RealtimeSessionCreateResponseInputAudioTranscription inputAudioTranscription?;
    # Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8
    decimal temperature?;
    @jsondata:Name {value: "turn_detection"}
    RealtimeSessionCreateResponseTurnDetection turnDetection?;
    # How the model chooses tools. Options are `auto`, `none`, `required`, or 
    # specify a function
    @jsondata:Name {value: "tool_choice"}
    string toolChoice?;
    @jsondata:Name {value: "client_secret"}
    RealtimeSessionCreateResponseClientSecret clientSecret;
    # Tools (functions) available to the model
    RealtimeResponseCreateParamsTools[] tools?;
};

# Represents the Queries record for the operation: listMessages
public type ListMessagesQueries record {
    # Filter messages by the run ID that generated them
    @http:Query {name: "run_id"}
    string runId?;
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

# Set of 16 key-value pairs that can be attached to an object. This can be
# useful for storing additional information about the object in a structured
# format, and querying for objects via API or the dashboard. 
# 
# Keys are strings with a maximum length of 64 characters. Values are strings
# with a maximum length of 512 characters
public type Metadata record {|
    string...;
|};

# The details for events with this `type`
public type AuditLogRateLimitdeleted record {
    # The rate limit ID
    string id?;
};

# Represents the Queries record for the operation: listFineTuningEvents
public type ListFineTuningEventsQueries record {
    # Number of events to retrieve
    int 'limit = 20;
    # Identifier for the last event from the previous pagination request
    string after?;
};

# The results of a file search tool call. See the 
# [file search guide](/docs/guides/tools-file-search) for more information
public type FileSearchToolCall record {
    # The unique ID of the file search tool call
    string id;
    # The type of the file search tool call. Always `file_search_call`
    "file_search_call" 'type;
    # The queries used to search for files
    string[] queries;
    # The results of the file search tool call
    FileSearchToolCallResults[]? results?;
    # The status of the file search tool call. One of `in_progress`, 
    # `searching`, `incomplete` or `failed`,
    "in_progress"|"searching"|"completed"|"incomplete"|"failed" status;
};

public type RunStepDetailsToolCallsFileSearchResultObjectContent record {
    # The text content of the file
    string text?;
    # The type of the content
    "text" 'type?;
};

public type EvalsevalIdBody record {
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # Rename the evaluation
    string name?;
};

# A text output from the model
public type OutputTextContent record {
    # The annotations of the text output
    Annotation[] annotations;
    # The text output from the model
    string text;
    # The type of the output text. Always `output_text`
    "output_text" 'type = "output_text";
};

# The payload used to update the rate limits
public type AuditLogRateLimitupdatedChangesRequested record {
    # The maximum batch input tokens per day. Only relevant for certain models
    @jsondata:Name {value: "batch_1_day_max_input_tokens"}
    int batch1DayMaxInputTokens?;
    # The maximum tokens per minute
    @jsondata:Name {value: "max_tokens_per_1_minute"}
    int maxTokensPer1Minute?;
    # The maximum images per minute. Only relevant for certain models
    @jsondata:Name {value: "max_images_per_1_minute"}
    int maxImagesPer1Minute?;
    # The maximum audio megabytes per minute. Only relevant for certain models
    @jsondata:Name {value: "max_audio_megabytes_per_1_minute"}
    int maxAudioMegabytesPer1Minute?;
    # The maximum requests per minute
    @jsondata:Name {value: "max_requests_per_1_minute"}
    int maxRequestsPer1Minute?;
    # The maximum requests per day. Only relevant for certain models
    @jsondata:Name {value: "max_requests_per_1_day"}
    int maxRequestsPer1Day?;
};

public type DeleteCertificateResponse record {
    # The ID of the certificate that was deleted
    string id;
    # The object type, must be `certificate.deleted`
    "certificate.deleted" 'object;
};

# Represents the Queries record for the operation: listEvals
public type ListEvalsQueries record {
    # Number of evals to retrieve
    int 'limit = 20;
    # Evals can be ordered by creation time or last updated time. Use
    # `created_at` for creation time or `updated_at` for last updated time
    @http:Query {name: "order_by"}
    "created_at"|"updated_at" orderBy = "created_at";
    # Identifier for the last eval from the previous pagination request
    string after?;
    # Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for descending order
    "asc"|"desc" 'order = "asc";
};

# The payload used to create the API key
public type AuditLogApiKeycreatedData record {
    # A list of scopes allowed for the API key, e.g. `["api.model.request"]`
    string[] scopes?;
};

# The results of a web search tool call. See the 
# [web search guide](/docs/guides/tools-web-search) for more information
public type WebSearchToolCall record {
    # The unique ID of the web search tool call
    string id;
    # The type of the web search tool call. Always `web_search_call`
    "web_search_call" 'type;
    # The status of the web search tool call
    "in_progress"|"searching"|"completed"|"failed" status;
};

# The aggregated audio transcriptions usage details of the specific time bucket
public type UsageAudioTranscriptionsResult record {
    # The number of seconds processed
    int seconds;
    # The count of requests made to the model
    @jsondata:Name {value: "num_model_requests"}
    int numModelRequests;
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    # When `group_by=user_id`, this field provides the user ID of the grouped usage result
    @jsondata:Name {value: "user_id"}
    string? userId?;
    # When `group_by=model`, this field provides the model name of the grouped usage result
    string? model?;
    # When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result
    @jsondata:Name {value: "api_key_id"}
    string? apiKeyId?;
    "organization.usage.audio_transcriptions.result" 'object;
};

# Details of the tool call
public type RunStepDetailsToolCallsObject record {
    # An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`
    @jsondata:Name {value: "tool_calls"}
    RunStepDetailsToolCallsObjectToolCalls[] toolCalls;
    # Always `tool_calls`
    "tool_calls" 'type;
};

# The function definition
public type RunToolCallObjectFunction record {
    # The name of the function
    string name;
    # The arguments that the model expects you to pass to the function
    string arguments;
};

# A detailed breakdown of the input tokens
public type ResponseUsageInputTokensDetails record {
    # The number of tokens that were retrieved from the cache. 
    # [More on prompt caching](/docs/guides/prompt-caching)
    @jsondata:Name {value: "cached_tokens"}
    int cachedTokens;
};

# An object representing a list of chat completion messages
public type ChatCompletionMessageList record {
    # The identifier of the first chat message in the data array
    @jsondata:Name {value: "first_id"}
    string firstId;
    # An array of chat completion message objects
    ChatCompletionMessageListData[] data;
    # The identifier of the last chat message in the data array
    @jsondata:Name {value: "last_id"}
    string lastId;
    # Indicates whether there are more chat messages available
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    # The type of this object. It is always set to "list"
    "list" 'object = "list";
};

public type CreateCompletionRequest record {
    # Modify the likelihood of specified tokens appearing in the completion.
    # 
    # Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    # 
    # As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated
    @jsondata:Name {value: "logit_bias"}
    record {|int...;|}? logitBias?;
    # If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
    # 
    # Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend
    int? seed?;
    # The maximum number of [tokens](/tokenizer) that can be generated in the completion.
    # 
    # The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens
    @jsondata:Name {value: "max_tokens"}
    int? maxTokens = 16;
    # Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    # 
    # [See more information about frequency and presence penalties.](/docs/guides/text-generation)
    @jsondata:Name {value: "presence_penalty"}
    decimal? presencePenalty = 0;
    # Echo back the prompt in addition to the completion
    boolean? echo = false;
    # The suffix that comes after a completion of inserted text.
    # 
    # This parameter is only supported for `gpt-3.5-turbo-instruct`
    string? suffix?;
    # How many completions to generate for each prompt.
    # 
    # **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`
    int? n = 1;
    # Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
    # 
    # The maximum value for `logprobs` is 5
    int? logprobs?;
    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # 
    # We generally recommend altering this or `temperature` but not both
    @jsondata:Name {value: "top_p"}
    decimal? topP = 1;
    # Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    # 
    # [See more information about frequency and presence penalties.](/docs/guides/text-generation)
    @jsondata:Name {value: "frequency_penalty"}
    decimal? frequencyPenalty = 0;
    # Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
    # 
    # When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
    # 
    # **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`
    @jsondata:Name {value: "best_of"}
    int? bestOf = 1;
    # Not supported with latest reasoning models `o3` and `o4-mini`.
    # 
    # Up to 4 sequences where the API will stop generating further tokens. The
    # returned text will not contain the stop sequence
    StopConfiguration? stop?;
    # Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions)
    boolean? 'stream = false;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    # 
    # We generally recommend altering this or `top_p` but not both
    decimal? temperature = 1;
    # ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them
    string|"gpt-3.5-turbo-instruct"|"davinci-002"|"babbage-002" model;
    @jsondata:Name {value: "stream_options"}
    ChatCompletionStreamOptions? streamOptions?;
    # The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
    # 
    # Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document
    string|string[]|int[]|PromptItemsArray[]? prompt = "<|endoftext|>";
    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)
    string user?;
};

# Log probability information for the choice
public type CreateChatCompletionResponseLogprobs record {
    # A list of message refusal tokens with log probability information
    ChatCompletionTokenLogprob[]? refusal;
    # A list of message content tokens with log probability information
    ChatCompletionTokenLogprob[]? content;
};

# An image input to the model. Learn about [image inputs](/docs/guides/vision)
public type InputImageContent record {
    @jsondata:Name {value: "image_url"}
    anydata imageUrl?;
    @jsondata:Name {value: "file_id"}
    anydata fileId?;
    # The detail level of the image to be sent to the model. One of `high`, `low`, or `auto`. Defaults to `auto`
    "low"|"high"|"auto" detail;
    # The type of the input item. Always `input_image`
    "input_image" 'type = "input_image";
};

# A citation for a web resource used to generate a model response
public type UrlCitationBody record {
    # The index of the first character of the URL citation in the message
    @jsondata:Name {value: "start_index"}
    int startIndex;
    # The index of the last character of the URL citation in the message
    @jsondata:Name {value: "end_index"}
    int endIndex;
    # The type of the URL citation. Always `url_citation`
    "url_citation" 'type = "url_citation";
    # The title of the web resource
    string title;
    # The URL of the web resource
    string url;
};

public type PromptItemsArray int[];

# Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
#   - If set to 'auto', and the Project is Scale tier enabled, the system
#     will utilize scale tier credits until they are exhausted.
#   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
#   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
#   - If set to 'flex', the request will be processed with the Flex Processing service tier. [Learn more](/docs/guides/flex-processing).
#   - When not set, the default behavior is 'auto'.
# 
#   When this parameter is set, the response body will include the `service_tier` utilized
public type ServiceTier "auto"|"default"|"flex"?;

public type RunStepDetailsToolCallsObjectToolCalls RunStepDetailsToolCallsCodeObject|RunStepDetailsToolCallsFileSearchObject|RunStepDetailsToolCallsFunctionObject;

public type UpdateVectorStoreFileAttributesRequest record {|
    # Set of 16 key-value pairs that can be attached to an object. This can be 
    # useful for storing additional information about the object in a structured 
    # format, and querying for objects via API or the dashboard. Keys are strings 
    # with a maximum length of 64 characters. Values are strings with a maximum 
    # length of 512 characters, booleans, or numbers
    VectorStoreFileAttributes? attributes;
|};

# Represents an individual API key in a project
public type ProjectApiKey record {
    ProjectApiKeyOwner owner;
    # The Unix timestamp (in seconds) of when the API key was last used
    @jsondata:Name {value: "last_used_at"}
    int lastUsedAt;
    # The name of the API key
    string name;
    # The Unix timestamp (in seconds) of when the API key was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The redacted value of the API key
    @jsondata:Name {value: "redacted_value"}
    string redactedValue;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `organization.project.api_key`
    "organization.project.api_key" 'object;
};

public type ListAssistantsResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    AssistantObject[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    string 'object;
};

# The details for events with this `type`
public type AuditLogApiKeydeleted record {
    # The tracking ID of the API key
    string id?;
};

# The text content that is part of a message
public type MessageRequestContentTextObject record {
    # Text content to be sent to the model
    string text;
    # Always `text`
    "text" 'type;
};

# Represents the Queries record for the operation: list-projects
public type ListProjectsQueries record {
    # If `true` returns all projects including those that have been `archived`. Archived projects are not included by default
    @http:Query {name: "include_archived"}
    boolean includeArchived = false;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

public type FunctionToolCallResource record {
    *FunctionToolCall;
    *FunctionToolCallResourceAllOf2;
};

public type TranscriptionSegment record {
    # Start time of the segment in seconds
    float 'start;
    # Temperature parameter used for generating the segment
    float temperature;
    # Average logprob of the segment. If the value is lower than -1, consider the logprobs failed
    @jsondata:Name {value: "avg_logprob"}
    float avgLogprob;
    # Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent
    @jsondata:Name {value: "no_speech_prob"}
    float noSpeechProb;
    # End time of the segment in seconds
    float end;
    # Array of token IDs for the text content
    int[] tokens;
    # Unique identifier of the segment
    int id;
    # Text content of the segment
    string text;
    # Seek offset of the segment
    int seek;
    # Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed
    @jsondata:Name {value: "compression_ratio"}
    float compressionRatio;
};

public type CreateImageRequest record {
    # The format in which generated images with `dall-e-2` and `dall-e-3` are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter isn't supported for `gpt-image-1` which will always return base64-encoded images
    @jsondata:Name {value: "response_format"}
    "url"|"b64_json"? responseFormat = "url";
    # The format in which the generated images are returned. This parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`
    @jsondata:Name {value: "output_format"}
    "png"|"jpeg"|"webp"? outputFormat = "png";
    # The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`, and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`
    "auto"|"1024x1024"|"1536x1024"|"1024x1536"|"256x256"|"512x512"|"1792x1024"|"1024x1792"? size = "auto";
    # The compression level (0-100%) for the generated images. This parameter is only supported for `gpt-image-1` with the `webp` or `jpeg` output formats, and defaults to 100
    @jsondata:Name {value: "output_compression"}
    int? outputCompression = 100;
    # Allows to set transparency for the background of the generated image(s). 
    # This parameter is only supported for `gpt-image-1`. Must be one of 
    # `transparent`, `opaque` or `auto` (default value). When `auto` is used, the 
    # model will automatically determine the best background for the image.
    # 
    # If `transparent`, the output format needs to support transparency, so it 
    # should be set to either `png` (default value) or `webp`
    "transparent"|"opaque"|"auto"? background = "auto";
    # Control the content-moderation level for images generated by `gpt-image-1`. Must be either `low` for less restrictive filtering or `auto` (default value)
    "low"|"auto"? moderation = "auto";
    # The model to use for image generation. One of `dall-e-2`, `dall-e-3`, or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used
    string|"dall-e-2"|"dall-e-3"|"gpt-image-1"? model = "dall-e-2";
    # The style of the generated images. This parameter is only supported for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images
    "vivid"|"natural"? style = "vivid";
    # A text description of the desired image(s). The maximum length is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`
    string prompt;
    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)
    string user?;
    # The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported
    int? n = 1;
    # The quality of the image that will be generated. 
    # 
    # - `auto` (default value) will automatically select the best quality for the given model.
    # - `high`, `medium` and `low` are supported for `gpt-image-1`.
    # - `hd` and `standard` are supported for `dall-e-3`.
    # - `standard` is the only option for `dall-e-2`
    "standard"|"hd"|"low"|"medium"|"high"|"auto"? quality = "auto";
};

# Represents an individual Admin API key in an org
public type AdminApiKey record {
    AdminApiKeyOwner owner;
    # The Unix timestamp (in seconds) of when the API key was last used
    @jsondata:Name {value: "last_used_at"}
    int? lastUsedAt;
    # The name of the API key
    string name;
    # The Unix timestamp (in seconds) of when the API key was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The redacted value of the API key
    @jsondata:Name {value: "redacted_value"}
    string redactedValue;
    # The value of the API key. Only shown on create
    string value?;
    # The object type, which is always `organization.admin_api_key`
    string 'object;
};

public type CompoundFilterFilters ComparisonFilter;

# The `checkpoint.permission` object represents a permission for a fine-tuned model checkpoint
public type FineTuningCheckpointPermission record {
    # The project identifier that the permission is for
    @jsondata:Name {value: "project_id"}
    string projectId;
    # The Unix timestamp (in seconds) for when the permission was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The permission identifier, which can be referenced in the API endpoints
    string id;
    # The object type, which is always "checkpoint.permission"
    "checkpoint.permission" 'object;
};

# A click action
public type Click record {
    # Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`
    "left"|"right"|"wheel"|"back"|"forward" button;
    # The x-coordinate where the click occurred
    int x;
    # The y-coordinate where the click occurred
    int y;
    # Specifies the event type. For a click action, this property is 
    # always set to `click`
    "click" 'type = "click";
};

# Content item used to generate a response
public type ItemResource InputMessageResource|OutputMessage|FileSearchToolCall|ComputerToolCall|ComputerToolCallOutputResource|WebSearchToolCall|FunctionToolCallResource|FunctionToolCallOutputResource;

# `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools
public type ChatCompletionToolChoiceOptionOneOf1 "none"|"auto"|"required";

# Represents the Queries record for the operation: list-project-service-accounts
public type ListProjectServiceAccountsQueries record {
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
};

# The aggregated images usage details of the specific time bucket
public type UsageImagesResult record {
    # The number of images processed
    int images;
    # The count of requests made to the model
    @jsondata:Name {value: "num_model_requests"}
    int numModelRequests;
    # When `group_by=size`, this field provides the image size of the grouped usage result
    string? size?;
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    # When `group_by=user_id`, this field provides the user ID of the grouped usage result
    @jsondata:Name {value: "user_id"}
    string? userId?;
    # When `group_by=model`, this field provides the model name of the grouped usage result
    string? model?;
    # When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`
    string? 'source?;
    # When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result
    @jsondata:Name {value: "api_key_id"}
    string? apiKeyId?;
    "organization.usage.images.result" 'object;
};

public type ModifyThreadRequestToolResourcesFileSearch record {
    # The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread
    @jsondata:Name {value: "vector_store_ids"}
    string[] vectorStoreIds?;
};

# The payload used to updated the service account
public type AuditLogServiceAccountupdatedChangesRequested record {
    # The role of the service account. Is either `owner` or `member`
    string role?;
};

# Represents the Queries record for the operation: usage-code-interpreter-sessions
public type UsageCodeInterpreterSessionsQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`
    @http:Query {name: "group_by"}
    ("project_id")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

# Details on why the run is incomplete. Will be `null` if the run is not incomplete
public type RunObjectIncompleteDetails record {
    # The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run
    "max_completion_tokens"|"max_prompt_tokens" reason?;
};

# A message input to the model with a role indicating instruction following
# hierarchy. Instructions given with the `developer` or `system` role take
# precedence over instructions given with the `user` role. Messages with the
# `assistant` role are presumed to have been generated by the model in previous
# interactions
public type EasyInputMessage record {
    # The role of the message input. One of `user`, `assistant`, `system`, or
    # `developer`
    "user"|"assistant"|"system"|"developer" role;
    # The type of the message input. Always `message`
    "message" 'type?;
    # Text, image, or audio input to the model, used to generate a response.
    # Can also contain previous assistant responses
    string|InputMessageContentList content;
};

public type VectorStoreSearchResultContentObject record {|
    # The text content returned from search
    string text;
    # The type of content
    "text" 'type;
|};

public type BatchErrorsData record {
    # An error code identifying the error type
    string code?;
    # The name of the parameter that caused the error, if applicable
    string? param?;
    # The line number of the input file where the error occurred, if applicable
    int? line?;
    # A human-readable message providing more details about the error
    string message?;
};

# Parameters for audio output. Required when audio output is requested with
# `modalities: ["audio"]`. [Learn more](/docs/guides/audio)
public type CreateChatCompletionRequestAudio record {
    VoiceIdsShared voice;
    # Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
    # `opus`, or `pcm16`
    "wav"|"aac"|"mp3"|"flac"|"opus"|"pcm16" format;
};

public type StopConfigurationOneOf1 string?;

# The output of a computer tool call
public type ComputerCallOutputItemParam record {
    # A computer screenshot image used with the computer use tool
    ComputerScreenshotImage output;
    @jsondata:Name {value: "acknowledged_safety_checks"}
    anydata acknowledgedSafetyChecks?;
    anydata id?;
    # The type of the computer tool call output. Always `computer_call_output`
    "computer_call_output" 'type = "computer_call_output";
    # The ID of the computer tool call that produced the output
    @jsondata:Name {value: "call_id"}
    string callId;
    anydata status?;
};

# A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs
public type CreateThreadRequestToolResources record {
    @jsondata:Name {value: "code_interpreter"}
    CreateAssistantRequestToolResourcesCodeInterpreter codeInterpreter?;
    @jsondata:Name {value: "file_search"}
    CreateThreadRequestToolResourcesFileSearch fileSearch?;
};

# Represents the Queries record for the operation: listRunSteps
public type ListRunStepsQueries record {
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
    # 
    # See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information
    @http:Query {name: "include[]"}
    ("step_details.tool_calls[*].file_search.results[*].content")[] include?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

# Represents an execution run on a [thread](/docs/api-reference/threads)
public type RunObject record {
    # The Unix timestamp (in seconds) for when the run was cancelled
    @jsondata:Name {value: "cancelled_at"}
    int? cancelledAt;
    # The instructions that the [assistant](/docs/api-reference/assistants) used for this run
    string instructions;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run
    @jsondata:Name {value: "assistant_id"}
    string assistantId;
    @jsondata:Name {value: "required_action"}
    RunObjectRequiredAction? requiredAction;
    # Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.)
    RunCompletionUsage? usage;
    # The Unix timestamp (in seconds) for when the run was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The list of tools that the [assistant](/docs/api-reference/assistants) used for this run
    @constraint:Array {maxLength: 20}
    AssistantObjectTools[] tools = [];
    # The nucleus sampling value used for this run. If not set, defaults to 1
    @jsondata:Name {value: "top_p"}
    decimal? topP?;
    # The maximum number of completion tokens specified to have been used over the course of the run
    @jsondata:Name {value: "max_completion_tokens"}
    int? maxCompletionTokens;
    # The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run
    @jsondata:Name {value: "thread_id"}
    string threadId;
    # The Unix timestamp (in seconds) for when the run will expire
    @jsondata:Name {value: "expires_at"}
    int? expiresAt;
    @jsondata:Name {value: "response_format"}
    AssistantsApiResponseFormatOption responseFormat;
    # The sampling temperature used for this run. If not set, defaults to 1
    decimal? temperature?;
    @jsondata:Name {value: "tool_choice"}
    AssistantsApiToolChoiceOption toolChoice;
    # The model that the [assistant](/docs/api-reference/assistants) used for this run
    string model;
    # The identifier, which can be referenced in API endpoints
    string id;
    @jsondata:Name {value: "last_error"}
    RunObjectLastError? lastError;
    @jsondata:Name {value: "incomplete_details"}
    RunObjectIncompleteDetails? incompleteDetails;
    @jsondata:Name {value: "truncation_strategy"}
    TruncationObject truncationStrategy;
    # The Unix timestamp (in seconds) for when the run was completed
    @jsondata:Name {value: "completed_at"}
    int? completedAt;
    @jsondata:Name {value: "parallel_tool_calls"}
    ParallelToolCalls parallelToolCalls;
    # The Unix timestamp (in seconds) for when the run was started
    @jsondata:Name {value: "started_at"}
    int? startedAt;
    # The Unix timestamp (in seconds) for when the run failed
    @jsondata:Name {value: "failed_at"}
    int? failedAt;
    # The maximum number of prompt tokens specified to have been used over the course of the run
    @jsondata:Name {value: "max_prompt_tokens"}
    int? maxPromptTokens;
    # The object type, which is always `thread.run`
    "thread.run" 'object;
    # The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`
    "queued"|"in_progress"|"requires_action"|"cancelling"|"cancelled"|"failed"|"completed"|"incomplete"|"expired" status;
};

# A result instance of the file search
public type RunStepDetailsToolCallsFileSearchResultObject record {
    # The score of the result. All values must be a floating point number between 0 and 1
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal score;
    # The name of the file that result was found in
    @jsondata:Name {value: "file_name"}
    string fileName;
    # The ID of the file that result was found in
    @jsondata:Name {value: "file_id"}
    string fileId;
    # The content of the result that was found. The content is only included if requested via the include query parameter
    RunStepDetailsToolCallsFileSearchResultObjectContent[] content?;
};

public type EvalRunOutputItemSampleOutput record {
    # The role of the message (e.g. "system", "assistant", "user")
    string role?;
    # The content of the message
    string content?;
};

public type ChatCompletionTool record {
    FunctionObject 'function;
    # The type of the tool. Currently, only `function` is supported
    "function" 'type;
};

# A EvalResponsesSource object describing a run data source configuration
public type EvalResponsesSource record {
    @jsondata:Name {value: "reasoning_effort"}
    ReasoningEffort? reasoningEffort?;
    # Nucleus sampling parameter. This is a query parameter used to select responses
    @jsondata:Name {value: "top_p"}
    decimal? topP?;
    # Metadata filter for the responses. This is a query parameter used to select responses
    record {}? metadata?;
    # Only include items created after this timestamp (inclusive). This is a query parameter used to select responses
    @jsondata:Name {value: "created_after"}
    int? createdAfter?;
    # Only include items created before this timestamp (inclusive). This is a query parameter used to select responses
    @jsondata:Name {value: "created_before"}
    int? createdBefore?;
    # Optional search string for instructions. This is a query parameter used to select responses
    @jsondata:Name {value: "instructions_search"}
    string? instructionsSearch?;
    # Sampling temperature. This is a query parameter used to select responses
    decimal? temperature?;
    # Whether to allow parallel tool calls. This is a query parameter used to select responses
    @jsondata:Name {value: "allow_parallel_tool_calls"}
    boolean? allowParallelToolCalls?;
    # The name of the model to find responses for. This is a query parameter used to select responses
    string? model?;
    # The type of run data source. Always `responses`
    "responses" 'type;
    # Whether the response has tool calls. This is a query parameter used to select responses
    @jsondata:Name {value: "has_tool_calls"}
    boolean? hasToolCalls?;
    # List of user identifiers. This is a query parameter used to select responses
    string[]? users?;
};

# Represents the Queries record for the operation: usage-moderations
public type UsageModerationsQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # Return only usage for these models
    string[] models?;
    # Return only usage for these users
    @http:Query {name: "user_ids"}
    string[] userIds?;
    # Return only usage for these API keys
    @http:Query {name: "api_key_ids"}
    string[] apiKeyIds?;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them
    @http:Query {name: "group_by"}
    ("project_id"|"user_id"|"api_key_id"|"model")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

# Specify additional output data to include in the model response. Currently
# supported values are:
# - `file_search_call.results`: Include the search results of
#   the file search tool call.
# - `message.input_image.image_url`: Include image urls from the input message.
# - `computer_call_output.output.image_url`: Include image urls from the computer call output
public type Includable "file_search_call.results"|"message.input_image.image_url"|"computer_call_output.output.image_url";

# The expiration policy for a vector store
public type VectorStoreExpirationAfter record {
    # Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`
    "last_active_at" anchor;
    # The number of days after the anchor time that the vector store will expire
    @constraint:Int {minValue: 1, maxValue: 365}
    int days;
};

# The details for events with this `type`
public type AuditLogProjectcreated record {
    # The payload used to create the project
    AuditLogProjectcreatedData data?;
    # The project ID
    string id?;
};

# Controls which (if any) tool is called by the model.
# `none` means the model will not call any tools and instead generates a message.
# `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
# `required` means the model must call one or more tools before responding to the user.
# Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool
public type AssistantsApiToolChoiceOption AssistantsApiToolChoiceOptionOneOf1|AssistantsNamedToolChoice;

public type AssistantSupportedModels "gpt-4.1"|"gpt-4.1-mini"|"gpt-4.1-nano"|"gpt-4.1-2025-04-14"|"gpt-4.1-mini-2025-04-14"|"gpt-4.1-nano-2025-04-14"|"o3-mini"|"o3-mini-2025-01-31"|"o1"|"o1-2024-12-17"|"gpt-4o"|"gpt-4o-2024-11-20"|"gpt-4o-2024-08-06"|"gpt-4o-2024-05-13"|"gpt-4o-mini"|"gpt-4o-mini-2024-07-18"|"gpt-4.5-preview"|"gpt-4.5-preview-2025-02-27"|"gpt-4-turbo"|"gpt-4-turbo-2024-04-09"|"gpt-4-0125-preview"|"gpt-4-turbo-preview"|"gpt-4-1106-preview"|"gpt-4-vision-preview"|"gpt-4"|"gpt-4-0314"|"gpt-4-0613"|"gpt-4-32k"|"gpt-4-32k-0314"|"gpt-4-32k-0613"|"gpt-3.5-turbo"|"gpt-3.5-turbo-16k"|"gpt-3.5-turbo-0613"|"gpt-3.5-turbo-1106"|"gpt-3.5-turbo-0125"|"gpt-3.5-turbo-16k-0613";

public type RunStepDetailsToolCallsCodeOutputImageObject record {
    RunStepDetailsToolCallsCodeOutputImageObjectImage image;
    # Always `image`
    "image" 'type;
};

public type CreateTranscriptionResponseJsonLogprobs record {
    # The log probability of the token
    decimal logprob?;
    # The bytes of the token
    decimal[] bytes?;
    # The token in the transcription
    string token?;
};

# Represents an individual `certificate` uploaded to the organization
public type Certificate record {
    # The name of the certificate
    string name;
    # The Unix timestamp (in seconds) of when the certificate was uploaded
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # Whether the certificate is currently active at the specified scope. Not returned when getting details for a specific certificate
    boolean active?;
    # The identifier, which can be referenced in API endpoints
    string id;
    @jsondata:Name {value: "certificate_details"}
    CertificateCertificateDetails certificateDetails;
    # The object type.
    # 
    # - If creating, updating, or getting a specific certificate, the object type is `certificate`.
    # - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`.
    # - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`
    "certificate"|"organization.certificate"|"organization.project.certificate" 'object;
};

# The `File` object represents a document that has been uploaded to OpenAI
public type OpenAIFile record {
    # The file identifier, which can be referenced in the API endpoints.
    string id;
    # The size of the file, in bytes.
    int bytes;
    # The Unix timestamp (in seconds) for when the file was created.
    int created_at;
    # The Unix timestamp (in seconds) for when the file will expire.
    int expires_at?;
    # The name of the file.
    string filename;
    # The object type, which is always `file`.
    "file" 'object;
    # The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
    "assistants"|"assistants_output"|"batch"|"batch_output"|"fine-tune"|"fine-tune-results"|"vision" purpose;
    # Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
    # 
    # # Deprecated
    @deprecated
    "uploaded"|"processed"|"error" status;
    # Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
    # 
    # # Deprecated
    @deprecated
    string status_details?;
};

# Represents token usage details including input tokens, output tokens,
# a breakdown of output tokens, and the total tokens used
public type ResponseUsage record {
    @jsondata:Name {value: "input_tokens_details"}
    ResponseUsageInputTokensDetails inputTokensDetails;
    # The total number of tokens used
    @jsondata:Name {value: "total_tokens"}
    int totalTokens;
    # The number of output tokens
    @jsondata:Name {value: "output_tokens"}
    int outputTokens;
    # The number of input tokens
    @jsondata:Name {value: "input_tokens"}
    int inputTokens;
    @jsondata:Name {value: "output_tokens_details"}
    ResponseUsageOutputTokensDetails outputTokensDetails;
};

# Set of 16 key-value pairs that can be attached to an object. This can be 
# useful for storing additional information about the object in a structured 
# format, and querying for objects via API or the dashboard. Keys are strings 
# with a maximum length of 64 characters. Values are strings with a maximum 
# length of 512 characters, booleans, or numbers
public type VectorStoreFileAttributes record {
};

# A file input to the model
public type InputFileContent record {
    # The name of the file to be sent to the model
    string filename?;
    @jsondata:Name {value: "file_id"}
    anydata fileId?;
    # The type of the input item. Always `input_file`
    "input_file" 'type = "input_file";
    # The content of the file to be sent to the model
    @jsondata:Name {value: "file_data"}
    string fileData?;
};

@constraint:Array {maxLength: 4, minLength: 1}
public type StopConfigurationStopConfigurationOneOf12 string[];

public type ApiKeyList record {
    @jsondata:Name {value: "first_id"}
    string firstId?;
    AdminApiKey[] data?;
    @jsondata:Name {value: "last_id"}
    string lastId?;
    @jsondata:Name {value: "has_more"}
    boolean hasMore?;
    string 'object?;
};

# Configuration for turn detection. Can be set to `null` to turn off. Server 
# VAD means that the model will detect the start and end of speech based on 
# audio volume and respond at the end of user speech
public type RealtimeSessionCreateResponseTurnDetection record {
    # Duration of silence to detect speech stop (in milliseconds). Defaults 
    # to 500ms. With shorter values the model will respond more quickly, 
    # but may jump in on short pauses from the user
    @jsondata:Name {value: "silence_duration_ms"}
    int silenceDurationMs?;
    # Amount of audio to include before the VAD detected speech (in 
    # milliseconds). Defaults to 300ms
    @jsondata:Name {value: "prefix_padding_ms"}
    int prefixPaddingMs?;
    # Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
    # higher threshold will require louder audio to activate the model, and 
    # thus might perform better in noisy environments
    decimal threshold?;
    # Type of turn detection, only `server_vad` is currently supported
    string 'type?;
};

public type ListVectorStoreFilesResponse record {
    string 'object;
    VectorStoreFileObject[] data;
    string first_id;
    string last_id;
    boolean has_more;
};

public type RunStepDetailsToolCallsCodeOutputImageObjectImage record {
    # The [file](/docs/api-reference/files) ID of the image
    @jsondata:Name {value: "file_id"}
    string fileId;
};

# The details for events with this `type`
public type AuditLogInvitesent record {
    # The payload used to create the invite
    AuditLogInvitesentData data?;
    # The ID of the invite
    string id?;
};

public type StaticChunkingStrategy record {|
    # The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`
    @jsondata:Name {value: "max_chunk_size_tokens"}
    int maxChunkSizeTokens;
    # The number of tokens that overlap between chunks. The default value is `400`.
    # 
    # Note that the overlap must not exceed half of `max_chunk_size_tokens`
    @jsondata:Name {value: "chunk_overlap_tokens"}
    int chunkOverlapTokens;
|};

public type VectorStoreFileContentResponseData record {
    # The text content
    string text?;
    # The content type (currently only `"text"`)
    string 'type?;
};

public type CreateEvalRequestTestingCriteria CreateEvalLabelModelGrader|EvalStringCheckGrader|EvalTextSimilarityGrader|EvalPythonGrader|EvalScoreModelGrader;

# References an image [File](/docs/api-reference/files) in the content of a message
public type MessageContentImageFileObject record {
    @jsondata:Name {value: "image_file"}
    MessageContentImageFileObjectImageFile imageFile;
    # Always `image_file`
    "image_file" 'type;
};

# Represents an `assistant` that can call the model and use tools
public type AssistantObject record {
    # The system instructions that the assistant uses. The maximum length is 256,000 characters
    string? instructions;
    @jsondata:Name {value: "tool_resources"}
    AssistantObjectToolResources? toolResources?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The Unix timestamp (in seconds) for when the assistant was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The description of the assistant. The maximum length is 512 characters
    string? description;
    # A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`
    @constraint:Array {maxLength: 128}
    AssistantObjectTools[] tools = [];
    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # 
    # We generally recommend altering this or temperature but not both
    @jsondata:Name {value: "top_p"}
    decimal? topP = 1;
    @jsondata:Name {value: "response_format"}
    AssistantsApiResponseFormatOption responseFormat?;
    # The name of the assistant. The maximum length is 256 characters
    string? name;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic
    decimal? temperature = 1;
    # ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them
    string model;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `assistant`
    "assistant" 'object;
};

public type EffectiveAt record {
    # Return only events whose `effective_at` (Unix seconds) is less than this value
    int lt?;
    # Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value
    int gte?;
    # Return only events whose `effective_at` (Unix seconds) is less than or equal to this value
    int lte?;
    # Return only events whose `effective_at` (Unix seconds) is greater than this value
    int gt?;
};

# An object specifying the format that the model must output.
# 
# Configuring `{ "type": "json_schema" }` enables Structured Outputs, 
# which ensures the model will match your supplied JSON schema. Learn more in the 
# [Structured Outputs guide](/docs/guides/structured-outputs).
# 
# The default format is `{ "type": "text" }` with no additional options.
# 
# **Not recommended for gpt-4o and newer models:**
# 
# Setting to `{ "type": "json_object" }` enables the older JSON mode, which
# ensures the message the model generates is valid JSON. Using `json_schema`
# is preferred for models that support it
public type TextResponseFormatConfiguration ResponseFormatText|TextResponseFormatJsonSchema|ResponseFormatJsonObject;

@deprecated
public type ChatCompletionRequestFunctionMessage record {
    # The role of the messages author, in this case `function`
    "function" role;
    # The name of the function to call
    string name;
    # The contents of the function message
    string? content;
};

# Combine multiple filters using `and` or `or`
public type CompoundFilter record {|
    # Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`
    CompoundFilterFilters[] filters;
    # Type of operation: `and` or `or`
    "and"|"or" 'type;
|};

# The function that the model called
public type ChatCompletionMessageToolCallFunction record {
    # The name of the function to call
    string name;
    # The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function
    string arguments;
};

# A pending safety check for the computer call
public type ComputerCallSafetyCheckParam record {
    anydata code?;
    # The ID of the pending safety check
    string id;
    anydata message?;
};

# A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file
public type MessageContentTextAnnotationsFilePathObject record {
    @jsondata:Name {value: "file_path"}
    MessageContentTextAnnotationsFilePathObjectFilePath filePath;
    @jsondata:Name {value: "start_index"}
    int startIndex;
    @jsondata:Name {value: "end_index"}
    int endIndex;
    # The text in the message content that needs to be replaced
    string text;
    # Always `file_path`
    "file_path" 'type;
};

# For now, this is always going to be an empty object
public type RunStepDetailsToolCallsFileSearchObjectFileSearch record {
    @jsondata:Name {value: "ranking_options"}
    RunStepDetailsToolCallsFileSearchRankingOptionsObject rankingOptions?;
    # The results of the file search
    RunStepDetailsToolCallsFileSearchResultObject[] results?;
};

public type CreateThreadAndRunRequest record {|
    # Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis
    string? instructions?;
    @jsondata:Name {value: "tool_resources"}
    CreateThreadAndRunRequestToolResources? toolResources?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run
    @jsondata:Name {value: "assistant_id"}
    string assistantId;
    # Options to create a new thread. If no thread is provided when running a 
    # request, an empty thread will be created
    CreateThreadRequest thread?;
    # Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis
    AssistantObjectTools[]? tools?;
    @jsondata:Name {value: "truncation_strategy"}
    TruncationObject truncationStrategy?;
    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # 
    # We generally recommend altering this or temperature but not both
    @jsondata:Name {value: "top_p"}
    decimal? topP = 1;
    # The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info
    @jsondata:Name {value: "max_completion_tokens"}
    int? maxCompletionTokens?;
    @jsondata:Name {value: "response_format"}
    AssistantsApiResponseFormatOption responseFormat?;
    @jsondata:Name {value: "parallel_tool_calls"}
    ParallelToolCalls parallelToolCalls?;
    # If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message
    boolean? 'stream?;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic
    decimal? temperature = 1;
    @jsondata:Name {value: "tool_choice"}
    AssistantsApiToolChoiceOption toolChoice?;
    # The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used
    string|"gpt-4.1"|"gpt-4.1-mini"|"gpt-4.1-nano"|"gpt-4.1-2025-04-14"|"gpt-4.1-mini-2025-04-14"|"gpt-4.1-nano-2025-04-14"|"gpt-4o"|"gpt-4o-2024-11-20"|"gpt-4o-2024-08-06"|"gpt-4o-2024-05-13"|"gpt-4o-mini"|"gpt-4o-mini-2024-07-18"|"gpt-4.5-preview"|"gpt-4.5-preview-2025-02-27"|"gpt-4-turbo"|"gpt-4-turbo-2024-04-09"|"gpt-4-0125-preview"|"gpt-4-turbo-preview"|"gpt-4-1106-preview"|"gpt-4-vision-preview"|"gpt-4"|"gpt-4-0314"|"gpt-4-0613"|"gpt-4-32k"|"gpt-4-32k-0314"|"gpt-4-32k-0613"|"gpt-3.5-turbo"|"gpt-3.5-turbo-16k"|"gpt-3.5-turbo-0613"|"gpt-3.5-turbo-1106"|"gpt-3.5-turbo-0125"|"gpt-3.5-turbo-16k-0613"? model?;
    # The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info
    @jsondata:Name {value: "max_prompt_tokens"}
    int? maxPromptTokens?;
|};

public type ReasoningItemSummary record {
    # A short summary of the reasoning used by the model when generating
    # the response
    string text;
    # The type of the object. Always `summary_text`
    "summary_text" 'type;
};

# Fine-tuning job event object
public type FineTuningJobEvent record {
    # The data associated with the event
    record {} data?;
    # The log level of the event
    "info"|"warn"|"error" level;
    # The Unix timestamp (in seconds) for when the fine-tuning job was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The object identifier
    string id;
    # The message of the event
    string message;
    # The type of event
    "message"|"metrics" 'type?;
    # The object type, which is always "fine_tuning.job.event"
    "fine_tuning.job.event" 'object;
};

public type FunctionToolCallOutputResource record {
    *FunctionToolCallOutput;
    *FunctionToolCallOutputResourceAllOf2;
};

# Specifies a tool the model should use. Use to force the model to call a specific tool
public type AssistantsNamedToolChoice record {
    AssistantsNamedToolChoiceFunction 'function?;
    # The type of the tool. If type is `function`, the function name must be set
    "function"|"code_interpreter"|"file_search" 'type;
};

public type ListRunStepsResponse record {
    string 'object;
    RunStepObject[] data;
    string first_id;
    string last_id;
    boolean has_more;
};

public type CreateEvalRequest record {
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The name of the evaluation
    string name?;
    # A list of graders for all eval runs in this group
    @jsondata:Name {value: "testing_criteria"}
    CreateEvalRequestTestingCriteria[] testingCriteria;
    # The configuration for the data source used for the evaluation runs
    @jsondata:Name {value: "data_source_config"}
    CreateEvalCustomDataSourceConfig|CreateEvalLogsDataSourceConfig dataSourceConfig;
};

# The service account that performed the audit logged action
public type AuditLogActorServiceAccount record {
    # The service account id
    string id?;
};

public type VoiceIdsSharedAnyOf1 string;

public type ProjectUserDeleteResponse record {
    boolean deleted;
    string id;
    "organization.project.user.deleted" 'object;
};

public type ChatCompletionRequestMessageContentPartAudioInputAudio record {
    # Base64 encoded audio data
    string data;
    # The format of the encoded audio data. Currently supports "wav" and "mp3"
    "wav"|"mp3" format;
};

public type CreateFineTuningJobRequest record {
    # The ID of an uploaded file that contains training data.
    # 
    # See [upload file](/docs/api-reference/files/create) for how to upload a file.
    # 
    # Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
    # 
    # The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.
    # 
    # See the [fine-tuning guide](/docs/guides/fine-tuning) for more details
    @jsondata:Name {value: "training_file"}
    string trainingFile;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
    # If a seed is not specified, one will be generated for you
    int? seed?;
    # The method used for fine-tuning
    FineTuneMethod method?;
    # The ID of an uploaded file that contains validation data.
    # 
    # If you provide this file, the data is used to generate validation
    # metrics periodically during fine-tuning. These metrics can be viewed in
    # the fine-tuning results file.
    # The same data should not be present in both train and validation files.
    # 
    # Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
    # 
    # See the [fine-tuning guide](/docs/guides/fine-tuning) for more details
    @jsondata:Name {value: "validation_file"}
    string? validationFile?;
    # The hyperparameters used for the fine-tuning job.
    # This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter
    CreateFineTuningJobRequestHyperparameters hyperparameters?;
    # The name of the model to fine-tune. You can select one of the
    # [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned)
    string|"babbage-002"|"davinci-002"|"gpt-3.5-turbo"|"gpt-4o-mini" model;
    # A string of up to 64 characters that will be added to your fine-tuned model name.
    # 
    # For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`
    string? suffix?;
    # A list of integrations to enable for your fine-tuning job
    CreateFineTuningJobRequestIntegrations[]? integrations?;
};

public type MessageContentImageUrlObjectImageUrl record {
    # Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
    "auto"|"low"|"high" detail = "auto";
    # The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp
    string url;
};

# Represents the Queries record for the operation: createRun
public type CreateRunQueries record {
    # A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
    # 
    # See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information
    @http:Query {name: "include[]"}
    ("step_details.tool_calls[*].file_search.results[*].content")[] include?;
};

# The aggregated moderations usage details of the specific time bucket
public type UsageModerationsResult record {
    # The count of requests made to the model
    @jsondata:Name {value: "num_model_requests"}
    int numModelRequests;
    # When `group_by=project_id`, this field provides the project ID of the grouped usage result
    @jsondata:Name {value: "project_id"}
    string? projectId?;
    # When `group_by=user_id`, this field provides the user ID of the grouped usage result
    @jsondata:Name {value: "user_id"}
    string? userId?;
    # When `group_by=model`, this field provides the model name of the grouped usage result
    string? model?;
    # The aggregated number of input tokens used
    @jsondata:Name {value: "input_tokens"}
    int inputTokens;
    # When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result
    @jsondata:Name {value: "api_key_id"}
    string? apiKeyId?;
    "organization.usage.moderations.result" 'object;
};

# Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.
# Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.
# Semantic VAD is more advanced and uses a turn detection model (in conjuction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with "uhhm", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency
public type RealtimeSessionTurnDetection record {
    # Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults 
    # to 500ms. With shorter values the model will respond more quickly, 
    # but may jump in on short pauses from the user
    @jsondata:Name {value: "silence_duration_ms"}
    int silenceDurationMs?;
    # Whether or not to automatically generate a response when a VAD stop event occurs
    @jsondata:Name {value: "create_response"}
    boolean createResponse = true;
    # Whether or not to automatically interrupt any ongoing response with output to the default
    # conversation (i.e. `conversation` of `auto`) when a VAD start event occurs
    @jsondata:Name {value: "interrupt_response"}
    boolean interruptResponse = true;
    # Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in 
    # milliseconds). Defaults to 300ms
    @jsondata:Name {value: "prefix_padding_ms"}
    int prefixPaddingMs?;
    # Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`
    "low"|"medium"|"high"|"auto" eagerness = "auto";
    # Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A 
    # higher threshold will require louder audio to activate the model, and 
    # thus might perform better in noisy environments
    decimal threshold?;
    # Type of turn detection
    "server_vad"|"semantic_vad" 'type = "server_vad";
};

# The ranker to use for the file search. If not specified will use the `auto` ranker
public type FileSearchRanker "auto"|"default_2024_08_21";

public type CreateFineTuningJobRequestIntegrations record {
    # The settings for your integration with Weights and Biases. This payload specifies the project that
    # metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
    # to your run, and set a default entity (team, username, etc) to be associated with your run
    CreateFineTuningJobRequestWandb wandb;
    # The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported
    "wandb" 'type;
};

public type DeleteFineTuningCheckpointPermissionResponse record {
    # Whether the fine-tuned model checkpoint permission was successfully deleted
    boolean deleted;
    # The ID of the fine-tuned model checkpoint permission that was deleted
    string id;
    # The object type, which is always "checkpoint.permission"
    "checkpoint.permission" 'object;
};

# `auto` is the default value
public type AssistantsApiResponseFormatOptionOneOf1 "auto";

# Represents a project rate limit config
public type ProjectRateLimit record {
    # The maximum batch input tokens per day. Only present for relevant models
    @jsondata:Name {value: "batch_1_day_max_input_tokens"}
    int batch1DayMaxInputTokens?;
    # The maximum tokens per minute
    @jsondata:Name {value: "max_tokens_per_1_minute"}
    int maxTokensPer1Minute;
    # The model this rate limit applies to
    string model;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The maximum images per minute. Only present for relevant models
    @jsondata:Name {value: "max_images_per_1_minute"}
    int maxImagesPer1Minute?;
    # The maximum audio megabytes per minute. Only present for relevant models
    @jsondata:Name {value: "max_audio_megabytes_per_1_minute"}
    int maxAudioMegabytesPer1Minute?;
    # The maximum requests per minute
    @jsondata:Name {value: "max_requests_per_1_minute"}
    int maxRequestsPer1Minute;
    # The object type, which is always `project.rate_limit`
    "project.rate_limit" 'object;
    # The maximum requests per day. Only present for relevant models
    @jsondata:Name {value: "max_requests_per_1_day"}
    int maxRequestsPer1Day?;
};

# The details for events with this `type`
public type AuditLogInviteaccepted record {
    # The ID of the invite
    string id?;
};

# Content item used to generate a response
public type Item InputMessage|OutputMessage|FileSearchToolCall|ComputerToolCall|ComputerCallOutputItemParam|WebSearchToolCall|FunctionToolCall|FunctionCallOutputItemParam|ReasoningItem;

# Approximate location parameters for the search
public type WebSearchUserLocation record {
    # Approximate location parameters for the search
    WebSearchLocation approximate;
    # The type of location approximation. Always `approximate`
    "approximate" 'type;
};

# A CustomDataSourceConfig object that defines the schema for the data source used for the evaluation runs.
# This schema is used to define the shape of the data that will be:
# - Used to define your testing criteria and
# - What data is required when creating a run
public type CreateEvalCustomDataSourceConfig record {
    # The json schema for each row in the data source
    @jsondata:Name {value: "item_schema"}
    record {} itemSchema;
    # Whether the eval should expect you to populate the sample namespace (ie, by generating responses off of your data source)
    @jsondata:Name {value: "include_sample_schema"}
    boolean includeSampleSchema = false;
    # The type of data source. Always `custom`
    "custom" 'type = "custom";
};

# The last error associated with this run. Will be `null` if there are no errors
public type RunObjectLastError record {
    # One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`
    "server_error"|"rate_limit_exceeded"|"invalid_prompt" code;
    # A human-readable description of the error
    string message;
};

public type ComputerToolCallOutputResource record {
    *ComputerToolCallOutput;
    *ComputerToolCallOutputResourceAllOf2;
};

# Represents a verbose json transcription response returned by model, based on the provided input
public type CreateTranscriptionResponseVerboseJson record {
    # The duration of the input audio
    decimal duration;
    # Extracted words and their corresponding timestamps
    TranscriptionWord[] words?;
    # The language of the input audio
    string language;
    # The transcribed text
    string text;
    # Segments of the transcribed text and their corresponding details
    TranscriptionSegment[] segments?;
};

public type SimpleInputMessage record {
    # The role of the message (e.g. "system", "assistant", "user")
    string role;
    # The content of the message
    string content;
};

# Represents the Queries record for the operation: listProjectCertificates
public type ListProjectCertificatesQueries record {
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

public type ProjectServiceAccountApiKey record {
    string name;
    @jsondata:Name {value: "created_at"}
    int createdAt;
    string id;
    string value;
    # The object type, which is always `organization.project.service_account.api_key`
    "organization.project.service_account.api_key" 'object;
};

public type CreateTranslationRequest record {|
    # The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm
    record {byte[] fileContent; string fileName;} file;
    # The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`
    @jsondata:Name {value: "response_format"}
    "json"|"text"|"srt"|"verbose_json"|"vtt" responseFormat = "json";
    # The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit
    decimal temperature = 0;
    # ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available
    string|"whisper-1" model;
    # An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English
    string prompt?;
|};

# A tool that controls a virtual computer. Learn more about the [computer tool](https://platform.openai.com/docs/guides/tools-computer-use)
public type ComputerUsePreviewTool record {
    # The type of computer environment to control
    "windows"|"mac"|"linux"|"ubuntu"|"browser" environment;
    # The height of the computer display
    @jsondata:Name {value: "display_height"}
    int displayHeight;
    # The type of the computer use tool. Always `computer_use_preview`
    "computer_use_preview" 'type = "computer_use_preview";
    # The width of the computer display
    @jsondata:Name {value: "display_width"}
    int displayWidth;
};

# The details for events with this `type`
public type AuditLogCertificatecreated record {
    # The name of the certificate
    string name?;
    # The certificate ID
    string id?;
};

public type UpdateVectorStoreRequest record {|
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    @jsondata:Name {value: "expires_after"}
    VectorStoreExpirationAfter expiresAfter?;
    # The name of the vector store
    string? name?;
|};

public type ApproximateLocation record {
    anydata country?;
    anydata city?;
    anydata timezone?;
    # The type of location approximation. Always `approximate`
    "approximate" 'type = "approximate";
    anydata region?;
};

# Breakdown of tokens used in a completion
public type CompletionUsageCompletionTokensDetails record {
    # When using Predicted Outputs, the number of tokens in the
    # prediction that appeared in the completion
    @jsondata:Name {value: "accepted_prediction_tokens"}
    int acceptedPredictionTokens = 0;
    # Audio input tokens generated by the model
    @jsondata:Name {value: "audio_tokens"}
    int audioTokens = 0;
    # Tokens generated by the model for reasoning
    @jsondata:Name {value: "reasoning_tokens"}
    int reasoningTokens = 0;
    # When using Predicted Outputs, the number of tokens in the
    # prediction that did not appear in the completion. However, like
    # reasoning tokens, these tokens are still counted in the total
    # completion tokens for purposes of billing, output, and context window
    # limits
    @jsondata:Name {value: "rejected_prediction_tokens"}
    int rejectedPredictionTokens = 0;
};

# The settings for your integration with Weights and Biases. This payload specifies the project that
# metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
# to your run, and set a default entity (team, username, etc) to be associated with your run
public type CreateFineTuningJobRequestWandb record {
    # A display name to set for the run. If not set, we will use the Job ID as the name
    string? name?;
    # The name of the project that the new run will be created under
    string project;
    # The entity to use for the run. This allows you to set the team or username of the WandB user that you would
    # like associated with the run. If not set, the default entity for the registered WandB API key is used
    string? entity?;
    # A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
    # default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}"
    string[] tags?;
};

public type UserRoleUpdateRequest record {
    # `owner` or `reader`
    "owner"|"reader" role;
};

# The payload used to create the checkpoint permission
public type AuditLogCheckpointPermissioncreatedData record {
    # The ID of the project that the checkpoint permission was created for
    @jsondata:Name {value: "project_id"}
    string projectId?;
    # The ID of the fine-tuned model checkpoint
    @jsondata:Name {value: "fine_tuned_model_checkpoint"}
    string fineTunedModelCheckpoint?;
};

public type AddUploadPartRequest record {|
    # The chunk of bytes for this Part
    record {byte[] fileContent; string fileName;} data;
|};

# The usage information for the request
public type CreateEmbeddingResponseUsage record {
    # The number of tokens used by the prompt
    @jsondata:Name {value: "prompt_tokens"}
    int promptTokens;
    # The total number of tokens used by the request
    @jsondata:Name {value: "total_tokens"}
    int totalTokens;
};

# An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`
public type Coordinate record {
    # The x-coordinate
    int x;
    # The y-coordinate
    int y;
};

public type VectorStoreSearchResultItem record {|
    # The similarity score for the result
    @constraint:Number {minValue: 0, maxValue: 1}
    decimal score;
    # The name of the vector store file
    string filename;
    # The ID of the vector store file
    @jsondata:Name {value: "file_id"}
    string fileId;
    # Set of 16 key-value pairs that can be attached to an object. This can be 
    # useful for storing additional information about the object in a structured 
    # format, and querying for objects via API or the dashboard. Keys are strings 
    # with a maximum length of 64 characters. Values are strings with a maximum 
    # length of 512 characters, booleans, or numbers
    VectorStoreFileAttributes? attributes;
    # Content chunks from the file
    VectorStoreSearchResultContentObject[] content;
|};

# The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`, the only supported format is `json`
public type AudioResponseFormat "json"|"text"|"srt"|"verbose_json"|"vtt";

public type AssistantObjectToolResourcesFileSearch record {
    # The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant
    @jsondata:Name {value: "vector_store_ids"}
    string[] vectorStoreIds?;
};

# A detailed breakdown of the output tokens
public type ResponseUsageOutputTokensDetails record {
    # The number of reasoning tokens
    @jsondata:Name {value: "reasoning_tokens"}
    int reasoningTokens;
};

# A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs
public type ModifyThreadRequestToolResources record {
    @jsondata:Name {value: "code_interpreter"}
    CreateAssistantRequestToolResourcesCodeInterpreter codeInterpreter?;
    @jsondata:Name {value: "file_search"}
    ModifyThreadRequestToolResourcesFileSearch fileSearch?;
};

public type ComputerAction Click|DoubleClick|Drag|KeyPress|Move|Screenshot|Scroll|Type|Wait;

public type EvalJsonlFileIdSource record {
    # The identifier of the file
    string id;
    # The type of jsonl source. Always `file_id`
    "file_id" 'type = "file_id";
};

# The Code Interpreter tool call definition
public type RunStepDetailsToolCallsCodeObjectCodeInterpreter record {
    # The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type
    RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputs[] outputs;
    # The input to the Code Interpreter tool call
    string input;
};

public type CertificateCertificateDetails record {
    # The Unix timestamp (in seconds) of when the certificate expires
    @jsondata:Name {value: "expires_at"}
    int expiresAt?;
    # The content of the certificate in PEM format
    string content?;
    # The Unix timestamp (in seconds) of when the certificate becomes valid
    @jsondata:Name {value: "valid_at"}
    int validAt?;
};

public type VoiceIdsShared VoiceIdsSharedAnyOf1|VoiceIdsSharedVoiceIdsSharedAnyOf12;

# An object representing a list of output items for an evaluation run
public type EvalRunOutputItemList record {
    # The identifier of the first eval run output item in the data array
    @jsondata:Name {value: "first_id"}
    string firstId;
    # An array of eval run output item objects
    EvalRunOutputItem[] data;
    # The identifier of the last eval run output item in the data array
    @jsondata:Name {value: "last_id"}
    string lastId;
    # Indicates whether there are more eval run output items available
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    # The type of this object. It is always set to "list"
    "list" 'object = "list";
};

public type AuditLogCertificatesactivatedCertificates record {
    # The name of the certificate
    string name?;
    # The certificate ID
    string id?;
};

# On an incomplete message, details about why the message is incomplete
public type MessageObjectIncompleteDetails record {
    # The reason the message is incomplete
    "content_filter"|"max_tokens"|"run_cancelled"|"run_expired"|"run_failed" reason;
};

# Customize your own chunking strategy by setting chunk size and chunk overlap
public type StaticChunkingStrategyRequestParam record {|
    StaticChunkingStrategy static;
    # Always `static`
    "static" 'type;
|};

# A list of files attached to a vector store
public type VectorStoreFileObject record {
    # The strategy used to chunk the file
    @jsondata:Name {value: "chunking_strategy"}
    StaticChunkingStrategyResponseParam|OtherChunkingStrategyResponseParam chunkingStrategy?;
    # The total vector store usage in bytes. Note that this may be different from the original file size
    @jsondata:Name {value: "usage_bytes"}
    int usageBytes;
    # The Unix timestamp (in seconds) for when the vector store file was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # Set of 16 key-value pairs that can be attached to an object. This can be 
    # useful for storing additional information about the object in a structured 
    # format, and querying for objects via API or the dashboard. Keys are strings 
    # with a maximum length of 64 characters. Values are strings with a maximum 
    # length of 512 characters, booleans, or numbers
    VectorStoreFileAttributes? attributes?;
    # The identifier, which can be referenced in API endpoints
    string id;
    @jsondata:Name {value: "last_error"}
    VectorStoreFileObjectLastError? lastError;
    # The object type, which is always `vector_store.file`
    "vector_store.file" 'object;
    # The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to
    @jsondata:Name {value: "vector_store_id"}
    string vectorStoreId;
    # The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use
    "in_progress"|"completed"|"cancelled"|"failed" status;
};

# If the audio output modality is requested, this object contains data
# about the audio response from the model. [Learn more](/docs/guides/audio)
public type ChatCompletionResponseMessageAudio record {
    # The Unix timestamp (in seconds) for when this audio response will
    # no longer be accessible on the server for use in multi-turn
    # conversations
    @jsondata:Name {value: "expires_at"}
    int expiresAt;
    # Transcript of the audio generated by the model
    string transcript;
    # Base64 encoded audio bytes generated by the model, in the format
    # specified in the request
    string data;
    # Unique identifier for this audio response
    string id;
};

# For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure
public type FineTuningJobError record {
    # A machine-readable error code
    string code;
    # The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific
    string? param;
    # A human-readable error message
    string message;
};

public type ModelIdsResponses ModelIdsShared|ResponsesOnlyModel;

# An object representing a list of Chat Completions
public type ChatCompletionList record {
    # The identifier of the first chat completion in the data array
    @jsondata:Name {value: "first_id"}
    string firstId;
    # An array of chat completion objects
    CreateChatCompletionResponse[] data;
    # The identifier of the last chat completion in the data array
    @jsondata:Name {value: "last_id"}
    string lastId;
    # Indicates whether there are more Chat Completions available
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    # The type of this object. It is always set to "list"
    "list" 'object = "list";
};

# The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy
public type ChunkingStrategyRequestParam AutoChunkingStrategyRequestParam|StaticChunkingStrategyRequestParam;

# A list of the categories along with their scores as predicted by model
public type CreateModerationResponseCategoryScores record {
    # The score for the category 'illicit/violent'
    @jsondata:Name {value: "illicit/violent"}
    decimal illicitViolent;
    # The score for the category 'self-harm/instructions'
    @jsondata:Name {value: "self-harm/instructions"}
    decimal selfHarmInstructions;
    # The score for the category 'harassment'
    decimal harassment;
    # The score for the category 'violence/graphic'
    @jsondata:Name {value: "violence/graphic"}
    decimal violenceGraphic;
    # The score for the category 'illicit'
    decimal illicit;
    # The score for the category 'self-harm/intent'
    @jsondata:Name {value: "self-harm/intent"}
    decimal selfHarmIntent;
    # The score for the category 'hate/threatening'
    @jsondata:Name {value: "hate/threatening"}
    decimal hateThreatening;
    # The score for the category 'sexual/minors'
    @jsondata:Name {value: "sexual/minors"}
    decimal sexualMinors;
    # The score for the category 'harassment/threatening'
    @jsondata:Name {value: "harassment/threatening"}
    decimal harassmentThreatening;
    # The score for the category 'hate'
    decimal hate;
    # The score for the category 'self-harm'
    @jsondata:Name {value: "self-harm"}
    decimal selfHarm;
    # The score for the category 'sexual'
    decimal sexual;
    # The score for the category 'violence'
    decimal violence;
};

public type UsageTimeBucketResult UsageCompletionsResult|UsageEmbeddingsResult|UsageModerationsResult|UsageImagesResult|UsageAudioSpeechesResult|UsageAudioTranscriptionsResult|UsageVectorStoresResult|UsageCodeInterpreterSessionsResult|CostsResult;

# The payload used to create the service account
public type AuditLogServiceAccountcreatedData record {
    # The role of the service account. Is either `owner` or `member`
    string role?;
};

# References an image URL in the content of a message
public type MessageContentImageUrlObject record {
    @jsondata:Name {value: "image_url"}
    MessageContentImageUrlObjectImageUrl imageUrl;
    # The type of the content part
    "image_url" 'type;
};

# Indicates that the model should use a built-in tool to generate a response.
# [Learn more about built-in tools](/docs/guides/tools)
public type ToolChoiceTypes record {
    # The type of hosted tool the model should to use. Learn more about
    # [built-in tools](/docs/guides/tools).
    # 
    # Allowed values are:
    # - `file_search`
    # - `web_search_preview`
    # - `computer_use_preview`
    "file_search"|"web_search_preview"|"computer_use_preview"|"web_search_preview_2025_03_11" 'type;
};

# A StringCheckGrader object that performs a string comparison between input and reference using a specified operation
public type EvalStringCheckGrader record {
    # The reference text. This may include template strings
    string reference;
    # The input text. This may include template strings
    string input;
    # The name of the grader
    string name;
    # The object type, which is always `string_check`
    "string_check" 'type;
    # The string check operation to perform. One of `eq`, `ne`, `like`, or `ilike`
    "eq"|"ne"|"like"|"ilike" operation;
};

# A list of Response items
public type ResponseItemList record {
    # The ID of the first item in the list
    @jsondata:Name {value: "first_id"}
    string firstId;
    # A list of items used to generate this response
    ItemResource[] data;
    # The ID of the last item in the list
    @jsondata:Name {value: "last_id"}
    string lastId;
    # Whether there are more items available
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    # The type of object returned, must be `list`
    "list" 'object;
};

public type VectorStoreSearchRequest record {|
    # The maximum number of results to return. This number should be between 1 and 50 inclusive
    @jsondata:Name {value: "max_num_results"}
    int maxNumResults = 10;
    @jsondata:Name {value: "ranking_options"}
    VectorStoreSearchRequestRankingOptions rankingOptions?;
    # A query string for a search
    string|QueryItemsString[] query;
    # Whether to rewrite the natural language query for vector search
    @jsondata:Name {value: "rewrite_query"}
    boolean rewriteQuery = false;
    # A filter to apply based on file attributes
    ComparisonFilter|CompoundFilter filters?;
|};

public type ChatCompletionMessageListData record {
    *ChatCompletionResponseMessage;
    *DataAllOf2;
};

# This tool searches the web for relevant results to use in a response.
# Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat)
public type WebSearch record {
    @jsondata:Name {value: "search_context_size"}
    WebSearchContextSize searchContextSize?;
    @jsondata:Name {value: "user_location"}
    WebSearchUserLocation? userLocation?;
};

public type ProjectServiceAccountCreateRequest record {
    # The name of the service account being created
    string name;
};

public type ResponsesOnlyModel "o1-pro"|"o1-pro-2025-03-19"|"computer-use-preview"|"computer-use-preview-2025-03-11";

# A CompletionsRunDataSource object describing a model sampling configuration
public type CreateEvalCompletionsRunDataSource record {
    @jsondata:Name {value: "input_messages"}
    record {"template" 'type; (EasyInputMessage|EvalItem)[] template;}|record {"item_reference" 'type; string item_reference;} inputMessages?;
    # The name of the model to use for generating completions (e.g. "o3-mini")
    string model?;
    EvalJsonlFileContentSource|EvalJsonlFileIdSource|EvalStoredCompletionsSource 'source;
    # The type of run data source. Always `completions`
    "completions" 'type = "completions";
    @jsondata:Name {value: "sampling_params"}
    CreateEvalCompletionsRunDataSourceSamplingParams samplingParams?;
};

# The monetary value in its associated currency
public type CostsResultAmount record {
    # Lowercase ISO-4217 currency e.g. "usd"
    string currency?;
    # The numeric value of the cost
    decimal value?;
};

public type ChatCompletionMessageToolCall record {
    # The function that the model called
    ChatCompletionMessageToolCallFunction 'function;
    # The ID of the tool call
    string id;
    # The type of the tool. Currently, only `function` is supported
    "function" 'type;
};

public type CreateImageEditRequest record {
    # The image(s) to edit. Must be a supported image file or an array of images.
    # 
    # For `gpt-image-1`, each image should be a `png`, `webp`, or `jpg` file less 
    # than 25MB. You can provide up to 16 images.
    # 
    # For `dall-e-2`, you can only provide one image, and it should be a square 
    # `png` file less than 4MB
    record {byte[] fileContent; string fileName;}|record {byte[] fileContent; string fileName;}[] image;
    # The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated. This parameter is only supported for `dall-e-2`, as `gpt-image-1` will always return base64-encoded images
    @jsondata:Name {value: "response_format"}
    "url"|"b64_json"? responseFormat = "url";
    # The size of the generated images. Must be one of `1024x1024`, `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value) for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`
    "256x256"|"512x512"|"1024x1024"|"1536x1024"|"1024x1536"|"auto"? size = "1024x1024";
    # The model to use for image generation. Only `dall-e-2` and `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter specific to `gpt-image-1` is used
    string|"dall-e-2"|"gpt-image-1"? model = "dall-e-2";
    # A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`
    string prompt;
    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)
    string user?;
    # The number of images to generate. Must be between 1 and 10
    int? n = 1;
    # An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. If there are multiple images provided, the mask will be applied on the first image. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`
    record {byte[] fileContent; string fileName;} mask?;
    # The quality of the image that will be generated. `high`, `medium` and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports `standard` quality. Defaults to `auto`
    "standard"|"low"|"medium"|"high"|"auto"? quality = "auto";
};

# Overrides for the file search tool
public type AssistantToolsFileSearchFileSearch record {
    # The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
    # 
    # Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information
    @jsondata:Name {value: "max_num_results"}
    int maxNumResults?;
    @jsondata:Name {value: "ranking_options"}
    FileSearchRankingOptions rankingOptions?;
};

# An action to type in text
public type Type record {
    # The text to type
    string text;
    # Specifies the event type. For a type action, this property is 
    # always set to `type`
    "type" 'type = "type";
};

public type EvalJsonlFileContentSource record {
    # The type of jsonl source. Always `file_content`
    "file_content" 'type = "file_content";
    # The content of the jsonl file
    EvalJsonlFileContentSourceContent[] content;
};

public type AssistantObjectTools AssistantToolsCode|AssistantToolsFileSearch|AssistantToolsFunction;

# The input tokens detailed information for the image generation
public type ImagesResponseUsageInputTokensDetails record {
    # The number of text tokens in the input prompt
    @jsondata:Name {value: "text_tokens"}
    int textTokens;
    # The number of image tokens in the input prompt
    @jsondata:Name {value: "image_tokens"}
    int imageTokens;
};

public type UserDeleteResponse record {
    boolean deleted;
    string id;
    "organization.user.deleted" 'object;
};

# Describes an OpenAI model offering that can be used with the API
public type Model record {
    # The model identifier, which can be referenced in the API endpoints.
    string id;
    # The Unix timestamp (in seconds) when the model was created.
    int created;
    # The object type, which is always "model".
    "model" 'object;
    # The organization that owns the model.
    string owned_by;
};

# **o-series models only** 
# 
# Constrains effort on reasoning for 
# [reasoning models](https://platform.openai.com/docs/guides/reasoning).
# Currently supported values are `low`, `medium`, and `high`. Reducing
# reasoning effort can result in faster responses and fewer tokens used
# on reasoning in a response
public type ReasoningEffort "low"|"medium"|"high"?;

# A refusal from the model
public type RefusalContent record {
    # The refusal explanationfrom the model
    string refusal;
    # The type of the refusal. Always `refusal`
    "refusal" 'type = "refusal";
};

public type ListFilesResponse record {
    @jsondata:Name {value: "first_id"}
    string firstId;
    OpenAIFile[] data;
    @jsondata:Name {value: "last_id"}
    string lastId;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    string 'object;
};

public type DataAllOf2 record {
    # The identifier of the chat message
    string id;
};

# Represents the Queries record for the operation: getEvalRuns
public type GetEvalRunsQueries record {
    # Number of runs to retrieve
    int 'limit = 20;
    # Identifier for the last run from the previous pagination request
    string after?;
    # Sort order for runs by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`
    "asc"|"desc" 'order = "asc";
    # Filter runs by status. One of `queued` | `in_progress` | `failed` | `completed` | `canceled`
    "queued"|"in_progress"|"completed"|"canceled"|"failed" status?;
};

public type CreateVectorStoreRequest record {|
    # The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty
    @jsondata:Name {value: "chunking_strategy"}
    AutoChunkingStrategyRequestParam|StaticChunkingStrategyRequestParam chunkingStrategy?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    @jsondata:Name {value: "expires_after"}
    VectorStoreExpirationAfter expiresAfter?;
    # A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files
    @jsondata:Name {value: "file_ids"}
    string[] fileIds?;
    # The name of the vector store
    string name?;
|};

public type ProjectApiKeyDeleteResponse record {
    boolean deleted;
    string id;
    "organization.project.api_key.deleted" 'object;
};

# The details for events with this `type`
public type AuditLogServiceAccountcreated record {
    # The payload used to create the service account
    AuditLogServiceAccountcreatedData data?;
    # The service account ID
    string id?;
};

# Represents a thread that contains [messages](/docs/api-reference/messages)
public type ThreadObject record {
    @jsondata:Name {value: "tool_resources"}
    ModifyThreadRequestToolResources? toolResources;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
    # The Unix timestamp (in seconds) for when the thread was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The object type, which is always `thread`
    "thread" 'object;
};

# Options for streaming response. Only set this when you set `stream: true`
public type ChatCompletionStreamOptions record {
    # If set, an additional chunk will be streamed before the `data: [DONE]`
    # message. The `usage` field on this chunk shows the token usage statistics
    # for the entire request, and the `choices` field will always be an empty
    # array. 
    # 
    # All other chunks will also include a `usage` field, but with a null
    # value. **NOTE:** If the stream is interrupted, you may not receive the
    # final usage chunk which contains the total token usage for the request
    @jsondata:Name {value: "include_usage"}
    boolean includeUsage?;
};

public type CreateResponse record {
    *CreateModelResponseProperties;
    *ResponseProperties;
    *CreateResponseAllOf3;
};

public type ListPaginatedFineTuningJobsResponse record {
    FineTuningJob[] data;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

public type ListFineTuningCheckpointPermissionResponse record {
    @jsondata:Name {value: "first_id"}
    string? firstId?;
    FineTuningCheckpointPermission[] data;
    @jsondata:Name {value: "last_id"}
    string? lastId?;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

# Metrics at the step number during the fine-tuning job
public type FineTuningJobCheckpointMetrics record {
    @jsondata:Name {value: "full_valid_mean_token_accuracy"}
    decimal fullValidMeanTokenAccuracy?;
    @jsondata:Name {value: "valid_loss"}
    decimal validLoss?;
    @jsondata:Name {value: "full_valid_loss"}
    decimal fullValidLoss?;
    @jsondata:Name {value: "train_mean_token_accuracy"}
    decimal trainMeanTokenAccuracy?;
    @jsondata:Name {value: "valid_mean_token_accuracy"}
    decimal validMeanTokenAccuracy?;
    @jsondata:Name {value: "train_loss"}
    decimal trainLoss?;
    decimal step?;
};

# A log of a user action or configuration change within this organization
public type AuditLog record {
    @jsondata:Name {value: "rate_limit.updated"}
    AuditLogRateLimitupdated rateLimitUpdated?;
    @jsondata:Name {value: "user.updated"}
    AuditLogUserupdated userUpdated?;
    # The project that the action was scoped to. Absent for actions not scoped to projects
    AuditLogProject project?;
    @jsondata:Name {value: "certificate.deleted"}
    AuditLogCertificatedeleted certificateDeleted?;
    @jsondata:Name {value: "service_account.deleted"}
    AuditLogServiceAccountdeleted serviceAccountDeleted?;
    # The event type
    AuditLogEventType 'type;
    @jsondata:Name {value: "logout.failed"}
    AuditLogLoginfailed logoutFailed?;
    @jsondata:Name {value: "certificate.updated"}
    AuditLogCertificatecreated certificateUpdated?;
    @jsondata:Name {value: "login.failed"}
    AuditLogLoginfailed loginFailed?;
    @jsondata:Name {value: "service_account.updated"}
    AuditLogServiceAccountupdated serviceAccountUpdated?;
    @jsondata:Name {value: "rate_limit.deleted"}
    AuditLogRateLimitdeleted rateLimitDeleted?;
    # The ID of this log
    string id;
    @jsondata:Name {value: "project.created"}
    AuditLogProjectcreated projectCreated?;
    @jsondata:Name {value: "certificate.created"}
    AuditLogCertificatecreated certificateCreated?;
    @jsondata:Name {value: "checkpoint_permission.created"}
    AuditLogCheckpointPermissioncreated checkpointPermissionCreated?;
    @jsondata:Name {value: "organization.updated"}
    AuditLogOrganizationupdated organizationUpdated?;
    @jsondata:Name {value: "project.updated"}
    AuditLogProjectupdated projectUpdated?;
    @jsondata:Name {value: "project.archived"}
    AuditLogProjectarchived projectArchived?;
    @jsondata:Name {value: "user.added"}
    AuditLogUseradded userAdded?;
    @jsondata:Name {value: "invite.accepted"}
    AuditLogInviteaccepted inviteAccepted?;
    @jsondata:Name {value: "invite.deleted"}
    AuditLogInviteaccepted inviteDeleted?;
    # The actor who performed the audit logged action
    AuditLogActor actor;
    # The Unix timestamp (in seconds) of the event
    @jsondata:Name {value: "effective_at"}
    int effectiveAt;
    @jsondata:Name {value: "checkpoint_permission.deleted"}
    AuditLogCheckpointPermissiondeleted checkpointPermissionDeleted?;
    @jsondata:Name {value: "invite.sent"}
    AuditLogInvitesent inviteSent?;
    @jsondata:Name {value: "certificates.deactivated"}
    AuditLogCertificatesactivated certificatesDeactivated?;
    @jsondata:Name {value: "service_account.created"}
    AuditLogServiceAccountcreated serviceAccountCreated?;
    @jsondata:Name {value: "api_key.created"}
    AuditLogApiKeycreated apiKeyCreated?;
    @jsondata:Name {value: "user.deleted"}
    AuditLogUserdeleted userDeleted?;
    @jsondata:Name {value: "api_key.deleted"}
    AuditLogApiKeydeleted apiKeyDeleted?;
    @jsondata:Name {value: "certificates.activated"}
    AuditLogCertificatesactivated certificatesActivated?;
    @jsondata:Name {value: "api_key.updated"}
    AuditLogApiKeyupdated apiKeyUpdated?;
};

public type Filters ComparisonFilter|CompoundFilter;

public type ChatCompletionRequestSystemMessageContentPart ChatCompletionRequestMessageContentPartText;

# Messages sent by the model in response to user messages
public type ChatCompletionRequestAssistantMessage record {
    # The role of the messages author, in this case `assistant`
    "assistant" role;
    @jsondata:Name {value: "function_call"}
    ChatCompletionRequestAssistantMessageFunctionCall? functionCall?;
    # The refusal message by the assistant
    string? refusal?;
    # An optional name for the participant. Provides the model information to differentiate between participants of the same role
    string name?;
    @jsondata:Name {value: "tool_calls"}
    ChatCompletionMessageToolCalls toolCalls?;
    # Data about a previous audio response from the model. 
    # [Learn more](/docs/guides/audio)
    ChatCompletionRequestAssistantMessageAudio? audio?;
    # The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified
    string|ChatCompletionRequestAssistantMessageContentPart[]? content?;
};

# The last error associated with this run step. Will be `null` if there are no errors
public type RunStepObjectLastError record {
    # One of `server_error` or `rate_limit_exceeded`
    "server_error"|"rate_limit_exceeded" code;
    # A human-readable description of the error
    string message;
};

public type ListVectorStoresResponse record {
    string 'object;
    VectorStoreObject[] data;
    string first_id;
    string last_id;
    boolean has_more;
};

# Details of the Code Interpreter tool call the run step was involved in
public type RunStepDetailsToolCallsCodeObject record {
    @jsondata:Name {value: "code_interpreter"}
    RunStepDetailsToolCallsCodeObjectCodeInterpreter codeInterpreter;
    # The ID of the tool call
    string id;
    # The type of tool call. This is always going to be `code_interpreter` for this type of tool call
    "code_interpreter" 'type;
};

public type ChatCompletionRequestToolMessageContentPart ChatCompletionRequestMessageContentPartText;

# Represents if a given text input is potentially harmful
public type CreateModerationResponse record {
    # The model used to generate the moderation results
    string model;
    # The unique identifier for the moderation request
    string id;
    # A list of moderation objects
    CreateModerationResponseResults[] results;
};

# The payload used to update the API key
public type AuditLogApiKeyupdatedChangesRequested record {
    # A list of scopes allowed for the API key, e.g. `["api.model.request"]`
    string[] scopes?;
};

# Represents the Queries record for the operation: usage-images
public type UsageImagesQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # Return only usage for these models
    string[] models?;
    # Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them
    ("image.generation"|"image.edit"|"image.variation")[] sources?;
    # Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them
    ("256x256"|"512x512"|"1024x1024"|"1792x1792"|"1024x1792")[] sizes?;
    # Return only usage for these users
    @http:Query {name: "user_ids"}
    string[] userIds?;
    # Return only usage for these API keys
    @http:Query {name: "api_key_ids"}
    string[] apiKeyIds?;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them
    @http:Query {name: "group_by"}
    ("project_id"|"user_id"|"api_key_id"|"model"|"size"|"source")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

# The details for events with this `type`
public type AuditLogUserupdated record {
    @jsondata:Name {value: "changes_requested"}
    AuditLogUserupdatedChangesRequested changesRequested?;
    # The project ID
    string id?;
};

# An internal identifier for an item to reference
public type ItemReferenceParam record {
    # The ID of the item to reference
    string id;
    anydata 'type?;
};

# Represents the Queries record for the operation: usage-audio-transcriptions
public type UsageAudioTranscriptionsQueries record {
    # Start time (Unix seconds) of the query time range, inclusive
    @http:Query {name: "start_time"}
    int startTime;
    # Return only usage for these models
    string[] models?;
    # Return only usage for these users
    @http:Query {name: "user_ids"}
    string[] userIds?;
    # Return only usage for these API keys
    @http:Query {name: "api_key_ids"}
    string[] apiKeyIds?;
    # End time (Unix seconds) of the query time range, exclusive
    @http:Query {name: "end_time"}
    int endTime?;
    # Specifies the number of buckets to return.
    # - `bucket_width=1d`: default: 7, max: 31
    # - `bucket_width=1h`: default: 24, max: 168
    # - `bucket_width=1m`: default: 60, max: 1440
    int 'limit?;
    # Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them
    @http:Query {name: "group_by"}
    ("project_id"|"user_id"|"api_key_id"|"model")[] groupBy?;
    # A cursor for use in pagination. Corresponding to the `next_page` field from the previous response
    string page?;
    # Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`
    @http:Query {name: "bucket_width"}
    "1m"|"1h"|"1d" bucketWidth = "1d";
    # Return only usage for these projects
    @http:Query {name: "project_ids"}
    string[] projectIds?;
};

public type MessageContentTextAnnotationsFilePathObjectFilePath record {
    # The ID of the file that was generated
    @jsondata:Name {value: "file_id"}
    string fileId;
};

# A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs
public type CreateThreadAndRunRequestToolResources record {
    @jsondata:Name {value: "code_interpreter"}
    CreateAssistantRequestToolResourcesCodeInterpreter codeInterpreter?;
    @jsondata:Name {value: "file_search"}
    AssistantObjectToolResourcesFileSearch fileSearch?;
};

public type InviteRequestProjects record {
    # Project membership role
    "member"|"owner" role;
    # Project's public ID
    string id;
};

# Specifying a particular function via `{"name": "my_function"}` forces the model to call that function
public type ChatCompletionFunctionCallOption record {
    # The name of the function to call
    string name;
};

# A sample containing the input and output of the evaluation run
public type EvalRunOutputItemSample record {
    # An array of output messages
    EvalRunOutputItemSampleOutput[] output;
    # The top_p value used for sampling
    @jsondata:Name {value: "top_p"}
    decimal topP;
    # An array of input messages
    EvalRunOutputItemSampleInput[] input;
    # The maximum number of tokens allowed for completion
    @jsondata:Name {value: "max_completion_tokens"}
    int maxCompletionTokens;
    # The reason why the sample generation was finished
    @jsondata:Name {value: "finish_reason"}
    string finishReason;
    # The seed used for generating the sample
    int seed;
    # Token usage details for the sample
    EvalRunOutputItemSampleUsage usage;
    # The sampling temperature used
    decimal temperature;
    # The model used for generating the sample
    string model;
    # An object representing an error response from the Eval API
    EvalApiError 'error;
};

# The `fine_tuning.job` object represents a fine-tuning job that has been created through the API
public type FineTuningJob record {
    # The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)
    @jsondata:Name {value: "training_file"}
    string trainingFile;
    # The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents)
    @jsondata:Name {value: "result_files"}
    string[] resultFiles;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    # The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running
    @jsondata:Name {value: "finished_at"}
    int? finishedAt;
    # The seed used for the fine-tuning job
    int seed;
    # The method used for fine-tuning
    FineTuneMethod method?;
    # The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running
    @jsondata:Name {value: "fine_tuned_model"}
    string? fineTunedModel;
    # The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents)
    @jsondata:Name {value: "validation_file"}
    string? validationFile;
    # The Unix timestamp (in seconds) for when the fine-tuning job was created
    @jsondata:Name {value: "created_at"}
    int createdAt;
    # For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure
    FineTuningJobError? 'error;
    # The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running
    @jsondata:Name {value: "estimated_finish"}
    int? estimatedFinish?;
    # The organization that owns the fine-tuning job
    @jsondata:Name {value: "organization_id"}
    string organizationId;
    # The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs
    FineTuningJobHyperparameters hyperparameters;
    # The base model that is being fine-tuned
    string model;
    # The object identifier, which can be referenced in the API endpoints
    string id;
    # The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running
    @jsondata:Name {value: "trained_tokens"}
    int? trainedTokens;
    # A list of integrations to enable for this fine-tuning job
    FineTuningJobIntegrations[]? integrations?;
    # The object type, which is always "fine_tuning.job"
    "fine_tuning.job" 'object;
    # The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`
    "validating_files"|"queued"|"running"|"succeeded"|"failed"|"cancelled" status;
};

# Developer-provided instructions that the model should follow, regardless of
# messages sent by the user. With o1 models and newer, use `developer` messages
# for this purpose instead
public type ChatCompletionRequestSystemMessage record {
    # The role of the messages author, in this case `system`
    "system" role;
    # An optional name for the participant. Provides the model information to differentiate between participants of the same role
    string name?;
    # The contents of the system message
    string|ChatCompletionRequestSystemMessageContentPart[] content;
};

# A JsonlRunDataSource object with that specifies a JSONL file that matches the eval 
public type CreateEvalJsonlRunDataSource record {
    EvalJsonlFileContentSource|EvalJsonlFileIdSource 'source;
    # The type of data source. Always `jsonl`
    "jsonl" 'type = "jsonl";
};

# Represents the Queries record for the operation: listAssistants
public type ListAssistantsQueries record {
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

public type MessageContentTextObjectText record {
    MessageContentTextObjectTextAnnotations[] annotations;
    # The data that makes up the text
    string value;
};

# Token usage details for the sample
public type EvalRunOutputItemSampleUsage record {
    # The number of completion tokens generated
    @jsondata:Name {value: "completion_tokens"}
    int completionTokens;
    # The number of prompt tokens used
    @jsondata:Name {value: "prompt_tokens"}
    int promptTokens;
    # The total number of tokens used
    @jsondata:Name {value: "total_tokens"}
    int totalTokens;
    # The number of tokens retrieved from cache
    @jsondata:Name {value: "cached_tokens"}
    int cachedTokens;
};

public type FineTuningJobIntegrations FineTuningIntegration;

# Represents the Queries record for the operation: listFineTuningCheckpointPermissions
public type ListFineTuningCheckpointPermissionsQueries record {
    # The ID of the project to get permissions for
    @http:Query {name: "project_id"}
    string projectId?;
    # Number of permissions to retrieve
    int 'limit = 10;
    # Identifier for the last permission ID from the previous pagination request
    string after?;
    # The order in which to retrieve permissions
    "ascending"|"descending" 'order = "descending";
};

# The details for events with this `type`
public type AuditLogApiKeyupdated record {
    @jsondata:Name {value: "changes_requested"}
    AuditLogApiKeyupdatedChangesRequested changesRequested?;
    # The tracking ID of the API key
    string id?;
};

public type OutputContent OutputTextContent|RefusalContent;

public type InviteRequest record {
    # `owner` or `reader`
    "reader"|"owner" role;
    # An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior
    InviteRequestProjects[] projects?;
    # Send an email to this address
    string email;
};

public type ModelIdsShared ModelIdsSharedAnyOf1|ModelIdsSharedModelIdsSharedAnyOf12;

public type ListFineTuningJobEventsResponse record {
    FineTuningJobEvent[] data;
    @jsondata:Name {value: "has_more"}
    boolean hasMore;
    "list" 'object;
};

public type ProjectUpdateRequest record {
    # The updated name of the project, this name appears in reports
    string name;
};

# A list of one or many input items to the model, containing different content 
# types
public type InputMessageContentList InputContent[];

# Represents an individual `user` within an organization
public type User record {
    # The Unix timestamp (in seconds) of when the user was added
    @jsondata:Name {value: "added_at"}
    int addedAt;
    # `owner` or `reader`
    "owner"|"reader" role;
    # The name of the user
    string name;
    # The identifier, which can be referenced in API endpoints
    string id;
    # The email address of the user
    string email;
    # The object type, which is always `organization.user`
    "organization.user" 'object;
};

public type CreateModerationResponseResults record {
    @jsondata:Name {value: "category_scores"}
    CreateModerationResponseCategoryScores categoryScores;
    # Whether any of the below categories are flagged
    boolean flagged;
    @jsondata:Name {value: "category_applied_input_types"}
    CreateModerationResponseCategoryAppliedInputTypes categoryAppliedInputTypes;
    # A list of the categories, and whether they are flagged or not
    CreateModerationResponseCategories categories;
};

public type ComputerToolCallOutputResourceAllOf2 record {
};

public type FunctionObject record {
    # The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64
    string name;
    # A description of what the function does, used by the model to choose when and how to call the function
    string description?;
    # Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling)
    boolean? strict = false;
    # The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. 
    # 
    # Omitting `parameters` defines a function with an empty parameter list
    FunctionParameters parameters?;
};

# The error code for the response
public type ResponseErrorCode "server_error"|"rate_limit_exceeded"|"invalid_prompt"|"vector_store_timeout"|"invalid_image"|"invalid_image_format"|"invalid_base64_image"|"invalid_image_url"|"image_too_large"|"image_too_small"|"image_parse_error"|"image_content_policy_violation"|"invalid_image_mode"|"image_file_too_large"|"unsupported_image_media_type"|"empty_image_file"|"failed_to_download_image"|"image_file_not_found";

# Represents the Queries record for the operation: listFineTuningJobCheckpoints
public type ListFineTuningJobCheckpointsQueries record {
    # Number of checkpoints to retrieve
    int 'limit = 10;
    # Identifier for the last checkpoint ID from the previous pagination request
    string after?;
};

public type EvalRunPerTestingCriteriaResults record {
    # A description of the testing criteria
    @jsondata:Name {value: "testing_criteria"}
    string testingCriteria;
    # Number of tests passed for this criteria
    int passed;
    # Number of tests failed for this criteria
    int failed;
};

public type RankingOptions record {
    # The score threshold for the file search, a number between 0 and 1. Numbers closer to 1 will attempt to return only the most relevant results, but may return fewer results
    @jsondata:Name {value: "score_threshold"}
    decimal scoreThreshold?;
    # The ranker to use for the file search
    "auto"|"default-2024-11-15" ranker?;
};

public type CompletionscompletionIdBody record {
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata;
};

# A mouse move action
public type Move record {
    # The x-coordinate to move to
    int x;
    # The y-coordinate to move to
    int y;
    # Specifies the event type. For a move action, this property is 
    # always set to `move`
    "move" 'type = "move";
};

public type InviteListResponse record {
    # The first `invite_id` in the retrieved `list`
    @jsondata:Name {value: "first_id"}
    string firstId?;
    Invite[] data;
    # The last `invite_id` in the retrieved `list`
    @jsondata:Name {value: "last_id"}
    string lastId?;
    # The `has_more` property is used for pagination to indicate there are additional results
    @jsondata:Name {value: "has_more"}
    boolean hasMore?;
    # The object type, which is always `list`
    "list" 'object;
};

# Configuration for the supervised fine-tuning method
public type FineTuneSupervisedMethod record {
    # The hyperparameters used for the fine-tuning job
    FineTuneSupervisedMethodHyperparameters hyperparameters?;
};

# Represents the Queries record for the operation: listFiles
public type ListFilesQueries record {
    # Only return files with the given purpose
    string purpose?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000
    int 'limit = 10000;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order
    "asc"|"desc" 'order = "desc";
};

public type CreateAssistantRequest record {|
    @jsondata:Name {value: "reasoning_effort"}
    ReasoningEffort? reasoningEffort?;
    # An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # 
    # We generally recommend altering this or temperature but not both
    @jsondata:Name {value: "top_p"}
    decimal? topP = 1;
    # The system instructions that the assistant uses. The maximum length is 256,000 characters
    string? instructions?;
    @jsondata:Name {value: "tool_resources"}
    CreateAssistantRequestToolResources? toolResources?;
    # Set of 16 key-value pairs that can be attached to an object. This can be
    # useful for storing additional information about the object in a structured
    # format, and querying for objects via API or the dashboard. 
    # 
    # Keys are strings with a maximum length of 64 characters. Values are strings
    # with a maximum length of 512 characters
    Metadata? metadata?;
    @jsondata:Name {value: "response_format"}
    AssistantsApiResponseFormatOption responseFormat?;
    # The name of the assistant. The maximum length is 256 characters
    string? name?;
    # What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic
    decimal? temperature = 1;
    # The description of the assistant. The maximum length is 512 characters
    string? description?;
    # ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them
    string|AssistantSupportedModels model;
    # A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`
    @constraint:Array {maxLength: 128}
    AssistantObjectTools[] tools = [];
|};

public type DeleteVectorStoreResponse record {
    boolean deleted;
    string id;
    "vector_store.deleted" 'object;
};

public type DeleteAssistantResponse record {
    boolean deleted;
    string id;
    "assistant.deleted" 'object;
};

public type CreateAssistantRequestToolResourcesCodeInterpreter record {
    # A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool
    @jsondata:Name {value: "file_ids"}
    string[] fileIds = [];
};

# A chat message that makes up the prompt or context. May include variable references to the "item" namespace, ie {{item.name}}
public type CreateEvalItem SimpleInputMessage|EvalItem;

# A new Realtime transcription session configuration.
# 
# When a session is created on the server via REST API, the session object
# also contains an ephemeral key. Default TTL for keys is one minute. This 
# property is not present when a session is updated via the WebSocket API
public type RealtimeTranscriptionSessionCreateResponse record {
    # The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`
    @jsondata:Name {value: "input_audio_format"}
    string inputAudioFormat?;
    # The set of modalities the model can respond with. To disable audio,
    # set this to ["text"]
    ("text"|"audio")[] modalities?;
    @jsondata:Name {value: "input_audio_transcription"}
    RealtimeTranscriptionSessionCreateResponseInputAudioTranscription inputAudioTranscription?;
    @jsondata:Name {value: "turn_detection"}
    RealtimeSessionCreateResponseTurnDetection turnDetection?;
    @jsondata:Name {value: "client_secret"}
    RealtimeTranscriptionSessionCreateResponseClientSecret clientSecret;
};

# A path to a file
public type FilePath record {
    # The ID of the file
    @jsondata:Name {value: "file_id"}
    string fileId;
    # The index of the file in the list of files
    int index;
    # The type of the file path. Always `file_path`
    "file_path" 'type;
};

public type RunStepDetailsToolCallsFileSearchObject record {
    @jsondata:Name {value: "file_search"}
    RunStepDetailsToolCallsFileSearchObjectFileSearch fileSearch;
    # The ID of the tool call object
    string id;
    # The type of tool call. This is always going to be `file_search` for this type of tool call
    "file_search" 'type;
};

# Default response format. Used to generate text responses
public type ResponseFormatText record {
    # The type of response format being defined. Always `text`
    "text" 'type;
};

# The details for events with this `type`
public type AuditLogServiceAccountdeleted record {
    # The service account ID
    string id?;
};

public type InputMessageResource record {
    *InputMessage;
    *InputMessageResourceAllOf2;
};

# Represents a chat completion response returned by model, based on the provided input
public type CreateChatCompletionResponse record {
    # The Unix timestamp (in seconds) of when the chat completion was created
    int created;
    # Usage statistics for the completion request
    CompletionUsage usage?;
    # The model used for the chat completion
    string model;
    @jsondata:Name {value: "service_tier"}
    ServiceTier? serviceTier?;
    # A unique identifier for the chat completion
    string id;
    # A list of chat completion choices. Can be more than one if `n` is greater than 1
    CreateChatCompletionResponseChoices[] choices;
    # This fingerprint represents the backend configuration that the model runs with.
    # 
    # Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism
    @jsondata:Name {value: "system_fingerprint"}
    string systemFingerprint?;
    # The object type, which is always `chat.completion`
    "chat.completion" 'object;
};

# Developer-provided instructions that the model should follow, regardless of
# messages sent by the user. With o1 models and newer, `developer` messages
# replace the previous `system` messages
public type ChatCompletionRequestDeveloperMessage record {
    # The role of the messages author, in this case `developer`
    "developer" role;
    # An optional name for the participant. Provides the model information to differentiate between participants of the same role
    string name?;
    # The contents of the developer message
    string|ChatCompletionRequestMessageContentPartText[] content;
};

# Represents the Queries record for the operation: list-audit-logs
public type ListAuditLogsQueries record {
    # Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object)
    @http:Query {name: "event_types[]"}
    AuditLogEventType[] eventTypes?;
    # Return only events whose `effective_at` (Unix seconds) is in this range
    @http:Query {name: "effective_at"}
    EffectiveAt effectiveAt?;
    # A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list
    string before?;
    # Return only events performed by users with these emails
    @http:Query {name: "actor_emails[]"}
    string[] actorEmails?;
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20
    int 'limit = 20;
    # Return only events performed on these targets. For example, a project ID updated
    @http:Query {name: "resource_ids[]"}
    string[] resourceIds?;
    # A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list
    string after?;
    # Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID
    @http:Query {name: "actor_ids[]"}
    string[] actorIds?;
    # Return only events for these projects
    @http:Query {name: "project_ids[]"}
    string[] projectIds?;
};

public type CreateTranslationResponseJson record {
    string text;
};

public type ChatCompletionRequestToolMessage record {
    # The role of the messages author, in this case `tool`
    "tool" role;
    # Tool call that this message is responding to
    @jsondata:Name {value: "tool_call_id"}
    string toolCallId;
    # The contents of the tool message
    string|ChatCompletionRequestToolMessageContentPart[] content;
};

public type CreateImageVariationRequest record {
    # The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square
    record {byte[] fileContent; string fileName;} image;
    # The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated
    @jsondata:Name {value: "response_format"}
    "url"|"b64_json"? responseFormat = "url";
    # The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`
    "256x256"|"512x512"|"1024x1024"? size = "1024x1024";
    # The model to use for image generation. Only `dall-e-2` is supported at this time
    string|"dall-e-2"? model = "dall-e-2";
    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids)
    string user?;
    # The number of images to generate. Must be between 1 and 10
    int? n = 1;
};

public type UploadCertificateRequest record {
    # An optional name for the certificate
    string name?;
    # The certificate content in PEM format
    string content;
};

public type Response record {
    *ModelResponseProperties;
    *ResponseProperties;
    *ResponseAllOf3;
};

public type DeleteThreadResponse record {
    boolean deleted;
    string id;
    "thread.deleted" 'object;
};

# A PythonGrader object that runs a python script on the input
public type EvalPythonGrader record {
    # The threshold for the score
    @jsondata:Name {value: "pass_threshold"}
    decimal passThreshold?;
    # The name of the grader
    string name;
    # The source code of the python script
    string 'source;
    # The image tag to use for the python script
    @jsondata:Name {value: "image_tag"}
    string imageTag?;
    # The object type, which is always `python`
    "python" 'type;
};

# The event type
public type AuditLogEventType "api_key.created"|"api_key.updated"|"api_key.deleted"|"checkpoint_permission.created"|"checkpoint_permission.deleted"|"invite.sent"|"invite.accepted"|"invite.deleted"|"login.succeeded"|"login.failed"|"logout.succeeded"|"logout.failed"|"organization.updated"|"project.created"|"project.updated"|"project.archived"|"service_account.created"|"service_account.updated"|"service_account.deleted"|"rate_limit.updated"|"rate_limit.deleted"|"user.added"|"user.updated"|"user.deleted";

# Structured Outputs configuration options, including a JSON Schema
public type JSONSchema record {
    # The schema for the response format, described as a JSON Schema object.
    # Learn how to build JSON schemas [here](https://json-schema.org/)
    ResponseFormatJsonSchemaSchema schema?;
    # The name of the response format. Must be a-z, A-Z, 0-9, or contain
    # underscores and dashes, with a maximum length of 64
    string name;
    # A description of what the response format is for, used by the model to
    # determine how to respond in the format
    string description?;
    # Whether to enable strict schema adherence when generating the output.
    # If set to true, the model will always follow the exact schema defined
    # in the `schema` field. Only a subset of JSON Schema is supported when
    # `strict` is `true`. To learn more, read the [Structured Outputs
    # guide](/docs/guides/structured-outputs)
    boolean? strict = false;
};

public type ChatCompletionRequestMessageContentPartRefusal record {
    # The refusal message generated by the model
    string refusal;
    # The type of the content part
    "refusal" 'type;
};

# Details of the message creation by the run step
public type RunStepDetailsMessageCreationObject record {
    @jsondata:Name {value: "message_creation"}
    RunStepDetailsMessageCreationObjectMessageCreation messageCreation;
    # Always `message_creation`
    "message_creation" 'type;
};

# Represents the Queries record for the operation: listPaginatedFineTuningJobs
public type ListPaginatedFineTuningJobsQueries record {
    # Optional metadata filter. To filter, use the syntax `metadata[k]=v`. Alternatively, set `metadata=null` to indicate no metadata
    record {|string...;|}? metadata?;
    # Number of fine-tuning jobs to retrieve
    int 'limit = 20;
    # Identifier for the last job from the previous pagination request
    string after?;
};

# Configuration options for a text response from the model. Can be plain
# text or structured JSON data. Learn more:
# - [Text inputs and outputs](/docs/guides/text)
# - [Structured Outputs](/docs/guides/structured-outputs)
public type ResponsePropertiesText record {
    # An object specifying the format that the model must output.
    # 
    # Configuring `{ "type": "json_schema" }` enables Structured Outputs, 
    # which ensures the model will match your supplied JSON schema. Learn more in the 
    # [Structured Outputs guide](/docs/guides/structured-outputs).
    # 
    # The default format is `{ "type": "text" }` with no additional options.
    # 
    # **Not recommended for gpt-4o and newer models:**
    # 
    # Setting to `{ "type": "json_object" }` enables the older JSON mode, which
    # ensures the message the model generates is valid JSON. Using `json_schema`
    # is preferred for models that support it
    TextResponseFormatConfiguration format?;
};
